{"version":3,"sources":["components/InternalLink.jsx","icons/annotate-14px.svg","icons/add-14px.svg","icons/other-14px.svg","icons/parse-14px.svg","icons/passage-14px.svg","icons/question-14px.svg","components/HeatMap.js","components/Pane.js","components/ModelIntro.js","components/BeamSearch.js","components/ImageParamControl.jsx","components/Shared.js","components/Form.js","components/DemoInput.js","components/UsageSection.jsx","components/UsageHeader.jsx","components/UsageCode.jsx","components/highlight/SyntaxHighlight.js","components/Usage.jsx","components/Model.js","components/OutputField.js","components/demos/CodeSummarization.js","components/InterpretConstants.js","components/Saliency.js","components/Hotflip.js","components/demos/CodePrediction.js","models.js","components/Menu.js","components/ScrollToTopOnPageChange.jsx","components/WaitingForPermalink.js","App.js","index.js"],"names":["linkColorStyles","Link","InternalLink","styled","NavLink","HeatMap","props","state","activeRow","activeCol","filterOpacity","showRowAt","undefined","showColAt","opacity","minFilterOpacity","maxFilterOpacity","rowIndex","colIndex","this","setState","setOpacity","newProps","data","normalization","exped","map","x_list","x","Math","exp","sum","reduce","i","o","a","b","flatArray","max","min","setShowRowsAndColumns","newState","rowLabels","colLabels","label","index","transposeOpacity","col","row","color","supportedColors","className","includeSlider","type","step","value","onChange","e","Number","target","data-row","colLabel","showAllCols","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","rowLabel","style","backgroundColor","join","data-tip","data-for","id","place","effect","delayHide","delayShow","delayUpdate","React","Component","ResultDisplay","outputContent","resultPane","outputState","placeholderTemplate","message","xlinkHref","children","PaneBottomBase","PaneBottom","theme","palette","common","white","hex","PaneTopBase","PaneTop","ModelIntro","showFullDescription","title","description","Chosen","action","unchoose","idx","ChosenLI","Action","Unchooser","role","aria-label","onClick","ChoiceDropdown","predictedAction","choices","choose","options","probability","ChoiceLI","Choice","toFixed","ChoicesLI","ChoicesUL","BeamSearch","inputState","initialSequence","initial_sequence","bestActionSequence","runSequenceModel","slice","sequence","length","push","listItems","timestepChoices","sort","BeamSearchUL","ul","BeamSearchLI","li","border","main","black","span","spacing","xxs","ImageParamControl","useState","localState","setLocalState","imageLoading","setImageLoading","useEffect","modelParams","imgSrc","fetchImage","setImageLoadingAndSendEvent","s","imageName","image","fetch","response","blob","file","lastModifiedDate","Date","name","setStateAndSendEvent","val","Fragment","Dragger","info","status","originFileObj","maxFileBytes","onSuccess","onError","size","compressImage","compressAndSubmit","compressedFile","URL","createObjectURL","error","maxFileSize","match","showUploadList","beforeUpload","isImage","DraggerMessage","LoadingOutlined","DraggerImg","src","UploadOutlined","newFileName","originalFileName","require","basename","fileName","maxPixels","reader","FileReader","onload","event","img","Image","result","canvas","document","createElement","curPixels","width","height","scale","sqrt","ctx","getContext","drawImage","toBlob","File","lastModified","now","onerror","console","log","readAsDataURL","Upload","div","md","Promise","resolve","reject","onloadend","base64String","substr","indexOf","Tooltip","ReactTooltip","typography","bodySmall","fontSize","contrastColor","lineHeight","ColorizedToken","RedToken","GreenToken","TransparentToken","FormField","breakpoints","xs","FormLabel","bodyBold","fontWeight","baseInputStyles","css","primary","FormTextArea","Input","TextArea","FormInput","FormSelect","Select","PATTERN_NON_WORD_CHAR","PATTERN_WORD_CHAR","ELLIPSIS","EXAMPLE_NAME_SEPARATOR","DEFAULT_OPTION_GROUP","TOOLTIP_ID","truncateText","text","limit","Error","test","substring","makeSnippet","example","fields","maxLen","snippet","fieldName","DemoInput","examples","runModel","Array","isArray","normalizedExamples","handleExampleChange","eVal","parts","split","groupIndex","exampleIndex","decodeExampleName","stateUpdate","forEach","handleInputChange","handleSelectChange","handleRadioChange","runOnEnter","key","preventDefault","stopPropagation","cleanInputs","inputs","field","dependentInputs","selectedModel","responseData","exampleLabel","canRun","every","optional","inputOutputs","inputId","htmlFor","input","blobToString","then","image_base64","catch","onKeyDown","required","autoFocus","placeholder","disabled","maxLength","dropdownMatchSelectWidth","Option","best_action_sequence","extraState","Group","vertical","opt","desc","inputOutput","FormInstructions","defaultValue","exampleInfo","exampleType","OptGroup","RenderOptions","SelectOptionGroup","RunButtonArea","multiline","secondary","sm","encodedName","encodeExampleName","UsageSection","lg","UsageHeader","UsageCode","SyntaxHighlight","language","vs","customStyle","background","padding","Usage","usage","installNote","installCommand","bashNote","bashCommand","pythonNote","pythonCommand","evaluationNote","evaluationCommand","trainingNote","trainingCommand","Model","interpretModel","interpreter","apiUrlInterpret","method","headers","body","JSON","stringify","json","attackModel","attacker","inputToAttack","gradInput","attackInputs","url","apiUrlAttack","requestBody","input_field_to_attack","grad_input_field","handleSubModelChange","selectedSubModel","requestData","interpretData","attackData","model","bind","disablePermadata","apiUrl","restOfTheInputs","inputsWithSubModel","u","window","location","origin","queryString","qs","parse","search","record","toString","updateData","modelId","pathname","task_name","model_id","request_data","r","slug","newPath","history","Output","defaultUsage","_","partition","subModel","fieldsMinusModel","demoInput","outputProps","demoOutput","subModelUsage","subModelDescription","filter","tabs","tabContent","Wrapper","optionLabelProp","listHeight","BodyBold","OptDesc","ModelDesc","defaultActiveKey","animated","TabPane","tab","p","light","xl","OutputField","classes","suppressSummary","modelUrl","buildUsage","configPath","fullModelUrl","fullConfigPath","href","ActionInfo","tokenized_utterance","utterance_attention","considered_actions","action_probs","probability_heatmap","utterance_attention_heatmap","PanelDesc","modelProps","code","query","internals","predicted_actions","entities","linking_scores","predicted_sql_query","Panel","header","action_index","withRouter","GRAD_INTERPRETER","IG_INTERPRETER","SG_INTERPRETER","getTokenWeightPairs","grads","tokens","token","weight","SaliencyComponent","createGlobalStyle","callInterpretModel","loading","handleInputTopKChange","inputIndex","Object","assign","trim","parseInt","topK","all","colorize","getTopKIndices","tokensWithWeights","topKIdx","colormapProps","nshades","colors","colormap","colorizedString","obj","display","has","round","indexedTokens","obj1","obj2","k","inputTokens","inputHeaders","rel","getDescription","runButton","margin","displayText","saliencyMaps","tokenWeights","Set","colorMap","saliencyMap","defaultProps","format","Collapse","attrs","ModelArea","Loading","LoadingText","InputOutput","InputOutputColumn","TextInput","ListItem","ChoiceList","ChoiceItem","button","transparent","UndoButton","Probability","Token","DEFAULT","addToUrl","output","choice","pushState","encodeURIComponent","loadFromUrl","find","decodeURIComponent","pop","trimRight","str","replace","probabilitiesNote","App","currentRequestId","top_tokens","logits","probabilities","debouncedChoose","debounce","setOutput","evt","nextReqId","addEventListener","fullText","doNotChangeUrl","textAreaText","cleanedChoice","createRequestId","err","classname","autoSize","minRows","maxRows","alt","hidden","Choices","lis","word","prob","probs","formatProbability","cleanWord","displaySeq","concat","goBackItem","back","modelGroups","iconSrc","annotateIcon","defaultOpen","models","component","CodeSummarization","addIcon","modelComponents","mg","modelRedirects","redirects","redirect","BodySmall","Typography","IconMenuItemColumns","VarnishMenu","Item","SubMenu","LeftSider","Layout","ImgIcon","Icon","Menu","siderWidthExpanded","siderWidthCollapsed","handleMenuCollapse","menuCollapsed","collapsedWidth","collapsible","collapsed","onCollapse","defaultSelectedKeys","redirectedModel","defaultOpenKeys","g","mode","m","to","ScrollToTopOnPageChange","listen","scrollTo","WaitingForPermalink","LoadingContainer","indicator","bodyJumbo","Content","DefaultAppLayoutProvider","Demo","Header","HeaderColumns","params","bgcolor","FullSizeContent","SingleTaskDemo","isModelChange","layoutVariant","exact","path","render","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.7b59df13.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { Link } from '@allenai/varnish';\n\nconst { linkColorStyles } = Link\n\nexport const InternalLink = styled(NavLink)`\n    ${linkColorStyles()}\n`;\n","export default __webpack_public_path__ + \"static/media/annotate-14px.bd47b597.svg\";","export default __webpack_public_path__ + \"static/media/add-14px.96cf0db9.svg\";","export default __webpack_public_path__ + \"static/media/other-14px.37e4f5bd.svg\";","export default __webpack_public_path__ + \"static/media/parse-14px.a9e3eb6a.svg\";","export default __webpack_public_path__ + \"static/media/passage-14px.9065f40e.svg\";","export default __webpack_public_path__ + \"static/media/question-14px.48c5ad5e.svg\";","import React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport '../css/HeatMap.css';\n\n/*******************************************************************************\n  <HeatMap /> Component\n\n  Properties:\n\n    data: Array[number[]]   * Array of arrays (rows) of numbers (cols) where each number\n                              corresponds to a table cell / heatmap intensity value\n    colLabels: string[]     * List of table header labels describing each column\n    rowLabels: string[]     * List of table header labels describing each row\n    includeSlider: bool     * Whether to include a slider to filter out values below a threshold\n    showAllCols: bool       * Whether to always show all columns with the slider\n    color: string           * Heatmap color (optional, default = \"blue\", see supportedColors below)\n    normalization: string   * Sets normalization type (optional). Supported types:\n\n      \"none\" (default, use this if you already have normalized probability distributions),\n      \"log-global\" (does a global softmax over the whole matrix to get a probability distribution),\n      \"log-per-row\" (does a softmax per row to get a probability distribution),\n      \"log-per-row-with-zero\" (does a softmax per row, with the addition of a 0 logit),\n      \"linear\" (finds the max and min values in the matrix, does a linear interpolation between them)\n\n*******************************************************************************/\n\nexport default class HeatMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeRow: null,\n      activeCol: null,\n      filterOpacity: 0,\n      showRowAt: undefined,\n      showColAt: undefined,\n      opacity: undefined,\n      minFilterOpacity: 0,\n      maxFilterOpacity: 1\n    };\n  }\n\n  handleMouseOver(rowIndex, colIndex) {\n    this.setState({\n      activeRow: rowIndex,\n      activeCol: colIndex\n    });\n  }\n\n  handleMouseOut() {\n    this.setState({\n      activeRow: null,\n      activeCol: null\n    });\n  }\n\n  componentDidMount() {\n    this.setOpacity(this.props);\n  }\n\n  componentDidUpdate(newProps) {\n    if(this.props.data !== newProps.data || this.props.normalization !== newProps.normalization) {\n        this.setOpacity(newProps);\n    }\n  }\n\n  setOpacity(newProps){\n    // HeatMap opacity via normalization conditional logic\n    let opacity;\n    if (newProps.normalization === \"log-global\") {\n      const exped = newProps.data.map((x_list) => x_list.map((x) => Math.exp(x)));\n      const flatArray = exped.reduce((i, o) => [...o, ...i], []);\n      const sum = flatArray.reduce((a, b) => a + b, 0);\n      opacity = exped.map((x_list) => x_list.map((x) => x / sum));\n    } else if (newProps.normalization === \"log-per-row\") {\n      const exped = newProps.data.map((x_list) => x_list.map((x) => Math.exp(x)));\n      opacity = exped.map((x_list) => {\n        const sum = x_list.reduce((a, b) => a + b, 0);\n        return x_list.map((x) => x / sum);\n      });\n    } else if (newProps.normalization === \"log-per-row-with-zero\") {\n      const exped = newProps.data.map((x_list) => x_list.map((x) => Math.exp(x)));\n      opacity = exped.map((x_list) => {\n        const sum = x_list.reduce((a, b) => a + b, 0) + Math.exp(0);\n        return x_list.map((x) => x / sum);\n      });\n    } else if (newProps.normalization === \"linear\") {\n      const flatArray = newProps.data.reduce((i, o) => [...o, ...i], []);\n      const max = Math.max(...flatArray);\n      const min = Math.min(...flatArray);\n      if (max === min) {\n        opacity = newProps.data;\n      } else {\n        opacity = newProps.data.map((x_list) => x_list.map((x) => ((x - min) / (max - min))));\n      }\n    } else {\n      opacity = newProps.data;\n    }\n\n    const flatArray = opacity.reduce((i, o) => [...o, ...i], []);\n    this.setState({opacity: opacity, minFilterOpacity: Math.min(...flatArray), maxFilterOpacity: Math.max(...flatArray)},\n      () => this.setShowRowsAndColumns(this.state));\n  }\n\n  setShowRowsAndColumns(newState){\n    if(newState.opacity && this.props.rowLabels && this.props.colLabels) {\n      let showRowAt = this.props.rowLabels.map((label, index) => {\n        return Math.max(...newState.opacity[index]) >= this.state.filterOpacity;\n      });\n      let transposeOpacity = newState.opacity[0].map((col, i) => newState.opacity.map(row => row[i]));\n      let showColAt = this.props.colLabels.map((label, index) => {\n        return Math.max(...transposeOpacity[index]) >= this.state.filterOpacity;\n      });\n\n      this.setState({ showRowAt, showColAt});\n    }\n  }\n\n  render() {\n    const { data,\n            colLabels,\n            rowLabels,\n            color = \"blue\" } = this.props;\n\n    const { activeRow,\n            activeCol,\n            showRowAt,\n            showColAt,\n            opacity } = this.state;\n\n    const supportedColors = {\n      // color values are [R,G,B]\n      \"red\": [255,50,50],\n      \"green\": [63, 201, 1],\n      \"blue\": [50,159,255] // Default\n    }\n\n    if (!showRowAt || !showColAt || !opacity){\n      return null; // loading\n    }\n    return (\n      <div className=\"heatmap-container\">\n        {this.props.includeSlider && this.state.minFilterOpacity!==this.state.maxFilterOpacity &&\n        <div className=\"slide_container\">\n          <input\n            type=\"range\"\n            min={this.state.minFilterOpacity}\n            max={this.state.maxFilterOpacity}\n            step=\"0.001\"\n            value={this.state.filterOpacity}\n            className=\"slider\"\n            onChange={e => this.setState({filterOpacity: Number(e.target.value)},\n              () => this.setShowRowsAndColumns(this.state))} />\n        </div>}\n        <div className=\"heatmap-scroll\">\n          <div className=\"heatmap\">\n            <div className=\"heatmap__ft\">\n              <div className=\"heatmap__tr\">\n                <div className=\"heatmap__td heatmap__td--placeholder\"></div>\n                <div className=\"heatmap__td\">\n                  {/* BEGIN Column Labels */}\n                  <table className=\"heatmap__col-labels\">\n                    <tbody>\n                      <tr data-row=\"header\">\n                        {colLabels.map((colLabel, colIndex) => (\n                          (this.props.showAllCols || this.state.showColAt[colIndex]) &&\n                          <th className={`heatmap__label${colIndex === activeCol ? \" heatmap__col-label-cursor\" : \"\"}`}\n                            key={`${colLabel}_${colIndex}`}\n                            onMouseOver={() => this.handleMouseOver(null, colIndex)}\n                            onMouseOut={() => this.handleMouseOut()}>\n                            <div className=\"heatmap__label__outer\">\n                              <div className=\"heatmap__label__inner\">\n                                <span>{colLabel}</span>\n                              </div>\n                            </div>\n                          </th>\n                        ))}\n                      </tr>\n                    </tbody>\n                  </table>{/* END Column Labels */}\n                </div>{/* END .heatmap__td */}\n              </div>{/* END .heatmap__tr */}\n              <div className=\"heatmap__tr\">\n                <div className=\"heatmap__td\">\n                  {/* BEGIN Row Labels */}\n                  <table className=\"heatmap__row-labels\">\n                    <tbody>\n                      {rowLabels.map((rowLabel, rowIndex) => (\n                        this.state.showRowAt[rowIndex] &&\n                        <tr className=\"heatmap__row\" key={`${rowLabel}_${rowIndex}`} data-row={rowIndex}>\n                          <th\n                            className={`heatmap__label${rowIndex === activeRow ? \" heatmap__row-label-cursor\" : \"\"}`}\n                            onMouseOver={() => this.handleMouseOver(rowIndex, null)}\n                            onMouseOut={() => this.handleMouseOut()}>\n                            <div>{rowLabel}</div>\n                          </th>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>{/* END Row Labels */}\n                </div>{/* END .heatmap__td */}\n                <div className={`heatmap__td heatmap__datagrid-container heatmap__datagrid-container--${color}`}>\n                  {/* BEGIN Data Grid */}\n                  <table>\n                    <tbody>\n                      {rowLabels.map((rowLabel, rowIndex) => (\n                        this.state.showRowAt[rowIndex] &&\n                        <tr className=\"heatmap__row\" key={`${rowLabel}_${rowIndex}`} data-row={rowIndex}>\n                          {colLabels.map((colLabel, colIndex) => (\n                            (this.props.showAllCols || this.state.showColAt[colIndex]) &&\n                            <td key={`${colLabel}_${colIndex}_${rowLabel}_${rowIndex}`}\n                              className=\"heatmap__cell\"\n                              style={{backgroundColor: `rgba(${supportedColors[color].join(\",\")},${opacity[rowIndex][colIndex]})`}}\n                              data-tip=\"\"\n                              data-for=\"heatmap-tooltip\">\n                              {((rowIndex === activeRow && colIndex === activeCol) || (colIndex === activeCol && rowIndex === 0 && activeRow === null)) ? (\n                                <div className=\"heatmap__col-cursor\"></div>\n                              ) : null}\n                              {((rowIndex === activeRow && colIndex === activeCol) || (rowIndex === activeRow && colIndex === 0 && activeCol === null)) ? (\n                                <div className=\"heatmap__row-cursor\"></div>\n                              ) : null}\n                              <div className={`heatmap__trigger${rowIndex === activeRow && colIndex === activeCol ? \" heatmap__cursor\" : \"\"}`}\n                                onMouseOver={() => this.handleMouseOver(rowIndex, colIndex)}\n                                onMouseOut={() => this.handleMouseOut()}>\n                              </div>\n                            </td>\n                          ))}\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>{/* END Data Grid */}\n                </div>{/* END .heatmap__td */}\n              </div>{/* END .heatmap__tr */}\n            </div>{/* END .heatmap__ft */}\n          </div>{/* END .heatmap */}\n        </div>{/* END .heatmap-scroll */}\n        {/* BEGIN Tooltip */}\n        {activeRow !== null && activeCol !== null ? (\n          <ReactTooltip\n            id=\"heatmap-tooltip\"\n            className=\"heatmap-tooltip\"\n            place=\"right\"\n            effect=\"solid\"\n            delayHide={0}\n            delayShow={0}\n            delayUpdate={0}>\n            {`${data[activeRow][activeCol]}`}\n            <span className=\"heatmap-tooltip__meta\"><strong>Row:</strong> {rowLabels[activeRow]}</span>\n            <span className=\"heatmap-tooltip__meta\"><strong>Column:</strong> {colLabels[activeCol]}</span>\n          </ReactTooltip>\n        ) : null /* END Tooltip */}\n        {/* END .heatmap-container */}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport '../css/Pane.css';\nimport '../css/model.css';\nimport '../css/passage.css';\n\n/*******************************************************************************\n  <ResultDisplay /> Component\n*******************************************************************************/\n\nclass ResultDisplay extends React.Component {\n\n    render() {\n      const { resultPane, outputState } = this.props;\n\n      const placeholderTemplate = (message) => {\n        return (\n          <div className=\"placeholder\">\n            <div className=\"placeholder__content\">\n              <svg className={`placeholder__${outputState}`}>\n                <use xlinkHref={`#icon__${outputState}`}></use>\n              </svg>\n              {message !== \"\" ? (\n                <p>{message}</p>\n              ) : null}\n            </div>\n          </div>\n        );\n      }\n\n      let outputContent;\n      switch (outputState) {\n        case \"working\":\n          outputContent = placeholderTemplate(\"\");\n          break;\n        case \"received\":\n          outputContent = this.props.children;\n          break;\n        case \"error\":\n          outputContent = placeholderTemplate(\"Something went wrong. Please try again.\");\n          break;\n        default:\n          // outputState = \"empty\"\n          outputContent = placeholderTemplate(\"Run model to view results\");\n      }\n\n      return (\n        <div className={`pane__${resultPane} model__output ${outputState !== \"received\" ? \"model__output--empty\" : \"\"}`}>\n          <div className=\"pane__thumb\"></div>\n          {outputContent}\n        </div>\n      );\n    }\n}\n\n\n/*******************************************************************************\n  <PaneRight /> Component\n*******************************************************************************/\n\nexport class PaneRight extends React.Component {\n    render() {\n      const { outputState } = this.props;\n\n      return (\n        <ResultDisplay resultPane=\"right\" outputState={outputState}>\n          {this.props.children}\n        </ResultDisplay>\n      )\n    }\n}\n\n/*******************************************************************************\n  <PaneBottom /> Component\n*******************************************************************************/\n\nexport class PaneBottomBase extends React.Component {\n  render() {\n    const { outputState } = this.props;\n\n    return (\n      <ResultDisplay className={this.props.className} resultPane=\"bottom\" outputState={outputState}>\n        {this.props.children}\n      </ResultDisplay>\n    )\n  }\n}\n\nexport const PaneBottom = styled(PaneBottomBase)`\n  background: ${({theme}) => theme.palette.common.white.hex};\n`;\n\n\n/*******************************************************************************\n<PaneLeft /> Component\n*******************************************************************************/\n\nexport class PaneLeft extends React.Component {\n\n    render () {\n      return (\n        <div className=\"pane__left\">\n          {this.props.children}\n        </div>\n      );\n    }\n}\n\n/*******************************************************************************\n<PaneTop /> Component\n*******************************************************************************/\n\nclass PaneTopBase extends React.Component {\n\n  render () {\n    return (\n      <div className={this.props.className}>\n        {this.props.children}\n      </ div>\n    );\n  }\n}\n\nexport const PaneTop = styled(PaneTopBase)`\n  background-color: ${({theme}) => theme.palette.common.white.hex};\n  width: 100%;\n  align-self: stretch;\n  display: block;\n`;\n","import React from 'react';\n\n/*******************************************************************************\n  <ModelIntro /> Component\n*******************************************************************************/\n\nclass ModelIntro extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      showFullDescription: false\n    }\n  }\n\n  toggleShowMore() {\n    this.setState({showFullDescription: !this.state.showFullDescription})\n  }\n\n  render() {\n\n    const { title, description } = this.props;\n\n    return (\n      <div>\n        <h2><span>{title}</span></h2>\n        <p>\n          <span>{description}</span>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default ModelIntro;\n","import React from 'react';\nimport styled from 'styled-components';\n\n// Component representing an element of the sequence that has been fixed,\n// with an X to \"unchoose\" it.\nconst Chosen = ({action, unchoose, idx}) => (\n    <ChosenLI key={`${idx}-${action}`}>\n        <Action>{action}</Action>\n        { /* eslint-disable-next-line */ }\n        <Unchooser role=\"img\" aria-label=\"x\" onClick={unchoose}>❌</Unchooser>\n    </ChosenLI>\n)\n\n// Component representing an element of the sequence that can be selected,\n// with a dropdown containing all the possible choices.\nconst ChoiceDropdown = ({predictedAction, choices, choose, idx}) => {\n\n    const options = choices.map(([probability, action], i) => (\n        <ChoiceLI key={`${idx}-${action}`} onClick={() => choose(action)}>\n            <Choice>{probability.toFixed(3)} {action}</Choice>\n        </ChoiceLI>\n    ))\n\n    return (\n        <ChoicesLI className=\"choice-dropdown\" key={idx}>\n            <Action>{predictedAction}</Action>\n            <ChoicesUL>\n                {options}\n            </ChoicesUL>\n        </ChoicesLI>\n    )\n}\n\n\nclass BeamSearch extends React.Component {\n    constructor(props) {\n        super(props)\n\n        const { inputState } = props\n        const initialSequence = (inputState && inputState.initial_sequence) || []\n        this.state = { initialSequence }\n    }\n\n\n    render() {\n        const { initialSequence } = this.state\n        const { bestActionSequence, choices, runSequenceModel } = this.props\n\n        // To \"unchoose\" the choice at a given index, we just rerun the model\n        // with initial_sequence truncaated at that point.\n        const unchoose = (idx) => () => {\n            runSequenceModel({initial_sequence: initialSequence.slice(0, idx)})\n        }\n\n        // To choose an action at an index, we start with the existing forced choices,\n        // then fill in with the elements of the bestActionSequence, and finally add\n        // the chosen action.\n        const choose = (idx) => (action) => {\n            const sequence = initialSequence.slice(0, idx)\n            while (sequence.length < idx) {\n                sequence.push(bestActionSequence[sequence.length])\n            }\n\n            sequence.push(action)\n            runSequenceModel({initial_sequence: sequence})\n        }\n\n        // We only want to render anything if ``choices`` is defined;\n        // that is, if we have a beam search result and if it's the new backend.\n        if (choices) {\n            const listItems = bestActionSequence.map((action, idx) => {\n                // Anything in ``initialSequence`` has already been chosen.\n                if (idx < initialSequence.length) {\n                    return <Chosen key={idx} action={action} unchoose={unchoose(idx)}/>\n                } else {\n                // Otherwise we need to offer a choice dropdown, and we should sort\n                // from highest probability to lowest probability.\n                const timestepChoices = choices[idx]\n                timestepChoices.sort((a, b) => (b[0] - a[0]))\n\n                return <ChoiceDropdown key={idx}\n                                       predictedAction={action}\n                                       choices={timestepChoices}\n                                       choose={choose(idx)}/>\n                }\n            })\n\n            return (\n                <div>\n                    <label>\n                        Interactive Beam Search\n                    </label>\n                    <BeamSearchUL>\n                       {listItems}\n                    </BeamSearchUL>\n                </div>\n            )\n        } else {\n            return null\n        }\n    }\n}\n\n\nconst BeamSearchUL = styled.ul`\n    font-size: 0.5em;\n`\n\nconst BeamSearchLI = styled.li`\n    display: inline-block;\n    font-size: 1em;\n    position: relative;\n    display: inline-block;\n    border: ${({theme}) => `1px solid ${theme.palette.border.main}`};\n`\n\n\nconst ChosenLI = styled(BeamSearchLI)`\n    background-color: lightgray;\n    color: white;\n\n    :hover a {\n        color: black;\n    }\n`\n\n\nconst ChoicesLI = styled(BeamSearchLI)`\n    :hover {\n        background-color: blue;\n    }\n\n    :hover .predicted-action {\n        color: white;\n    }\n\n    :hover ul {\n        display: table;\n        background-color: #f9f9f9;\n        font-size: 1.0em;\n        border: ${({theme}) => `1px solid ${theme.palette.common.black}`};\n    }\n`\n\nconst Unchooser = styled.span`\n    cursor: pointer;\n`\n\nconst Action = styled.a`\n    cursor: default;\n    color: #232323;\n`\n\nconst ChoicesUL = styled.ul`\n    display: none;\n    position: absolute;\n    z-index: 1;\n    list-style-type: none;\n    padding: ${({theme}) => theme.spacing.xxs};\n    margin: ${({theme}) => theme.spacing.xxs};\n    width: auto;\n    clear: both;\n`\n\nconst ChoiceLI = styled.li`\n`\n\nconst Choice = styled.a`\n    padding: ${({theme}) => theme.spacing.xxs};\n`\n\nexport default BeamSearch\n","/*\nMessage to the futurrrrrrrre:\n\nEventually we will want to unify the code that powers this application AND\nhttps://github.com/allenai/prior-demo/ AND https://github.com/allenai/comet-demo\n\nWhen we do, DON'T use the code below, rather pick code from the other 2 repos.\nThis code, while fine, props have drifted and its JSX not TSX.\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Upload, message } from '@allenai/varnish';\nimport { LoadingOutlined, UploadOutlined } from '@ant-design/icons';\n\n/* props = {\n    modelParams: {\n        imgSrc?: string;\n        imageName?: string;\n        image?: File;\n    }\n    onChange: (newModelParams) => void;\n}*/\nexport const ImageParamControl = (props) => {\n    const [localState, setLocalState] = useState({});\n    const [imageLoading, setImageLoading] = useState(false);\n\n    useEffect(\n        () => {\n            if (props.modelParams.imgSrc && props.modelParams.imgSrc !== localState.imgSrc) {\n                fetchImage(props.modelParams.imgSrc);\n            }\n        },\n        [props.modelParams.imgSrc]\n    );\n\n    const compressAndSubmit = (\n        file,\n        maxFileBytes,\n        onSuccess,\n        onError\n    ) => {\n        if (file.size > maxFileBytes) {\n            compressImage({ file, maxFileBytes, onSuccess, onError });\n        } else {\n            onSuccess(file);\n        }\n    };\n\n    const beforeUpload = (file) => {\n        const isImage =\n            file.type === 'image/bmp' ||\n            file.type === 'image/gif' ||\n            file.type === 'image/png' ||\n            file.type === 'image/jpeg' ||\n            file.type === 'image/tiff';\n        if (!isImage) {\n            message.error('You can only upload JPG/PNG/BMP/GIF/TIFF files');\n        } else {\n            setImageLoadingAndSendEvent(true);\n        }\n        return isImage;\n    };\n\n    const handleImageChange = (info) => {\n        if (info.file.status === 'done') {\n            const file = info.file.originFileObj;\n            if (file) {\n                compressAndSubmit(\n                    file,\n                    1024 * 1024, // compressing if larger than 1MB\n                    (compressedFile) => {\n                        setStateAndSendEvent({\n                            imgSrc: URL.createObjectURL(compressedFile),\n                            imageName: compressedFile.name,\n                            image: compressedFile\n                        });\n                        setImageLoadingAndSendEvent(false);\n                    },\n                    () => {\n                        message.error(`${info.file.name} file upload failed: ${info.file.error.message}`);\n                        setStateAndSendEvent({\n                            imgSrc: undefined,\n                            imageName: undefined,\n                            image: undefined\n                        });\n                        setImageLoadingAndSendEvent(false);\n                    }\n                );\n            }\n        } else if (info.file.status === 'error') {\n            // If the image is too large, then info.file.error.message will\n            // look like \"cannot post api/permalink/noop 413'\"\n            const errorIs413 = info.file.error.message.match(\"^cannot post .* 413'$\");\n\n            const maxFileSize = 5 * 1024 * 1024;\n            if (errorIs413 && info.file.size > maxFileSize) {\n                // Show a friendly \"too large\" error if it's appropriate to do so\n                message.error(`${info.file.name} file is too large; must be smaller than ${maxFileSize} bytes`);\n            } else {\n                // Otherwise, it's a different error.\n                message.error(`${info.file.name} file upload failed: ${info.file.error.message}`);\n            }\n\n            setStateAndSendEvent({\n                imgSrc: undefined,\n                imageName: undefined,\n                image: undefined\n            });\n            setImageLoadingAndSendEvent(false);\n        }\n    };\n\n    async function fetchImage(imgSrc) {\n        setImageLoadingAndSendEvent(true);\n        let s = {\n            imgSrc: imgSrc,\n            imageName: undefined,\n            image: undefined\n        };\n        if (imgSrc) {\n            const response = await fetch(imgSrc);\n            const blob = await response.blob();\n\n            const file = blob; // convert blob to file\n            file.lastModifiedDate = new Date();\n            file.name = imgSrc;\n            s = {\n                imgSrc: imgSrc,\n                imageName: file.name,\n                image: file\n            };\n        }\n        setStateAndSendEvent(s);\n        setImageLoadingAndSendEvent(false);\n    }\n\n    const setStateAndSendEvent = (s) => {\n        const val = { ...localState, ...s };\n        setLocalState(val);\n        props.onChange(val);\n    };\n\n    const setImageLoadingAndSendEvent = (imageLoading) => {\n        setImageLoading(imageLoading);\n    };\n\n    return (\n        <React.Fragment>\n            <div title=\"Upload an Image\">\n                <Dragger\n                    onChange={handleImageChange}\n                    showUploadList={false}\n                    // this is just a noop endpoint, we need an endpoint, but we dont need\n                    // to save the image\n                    action=\"api/permalink/noop\"\n                    beforeUpload={beforeUpload}>\n                    {imageLoading ? (\n                        <DraggerMessage>\n                            <LoadingOutlined /> Loading...\n                        </DraggerMessage>\n                    ) : null}\n                    {!imageLoading && localState.imgSrc ? (\n                        <DraggerImg src={localState.imgSrc} />\n                    ) : null}\n                    {!imageLoading && !localState.imgSrc ? (\n                        <DraggerMessage>\n                            <UploadOutlined /> Upload an Image\n                        </DraggerMessage>\n                    ) : null}\n                </Dragger>\n            </div>\n        </React.Fragment>\n    );\n};\n\n// TODO: consider making a Promise<Image> instead of callback\n// TODO: consider moving to a webworker\nexport const compressImage = ({\n    file,\n    maxFileBytes,\n    newFileName,\n    onSuccess,\n    onError\n}) => {\n    const path = require('path');\n    const originalFileName = path.basename(file.name);\n    const fileName = newFileName || `${originalFileName}_c.jpg`;\n    // console.log(`Compressing ${file.name} (${file.size}Bytes)`);\n    // maxPixels captures the maximum pixels in an image that's maxFileBytes in size.\n    // 3Bytes/px was calculated from random data case of png/jpg quality 1 https://superuser.com/questions/636333/what-is-the-largest-size-of-a-640x480-jpeg\n    const maxPixels = maxFileBytes / 3;\n    const reader = new FileReader();\n    reader.onload = (event) => {\n        const img = new Image();\n        img.src = event.target.result;\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            const curPixels = img.width * img.height;\n            const scale = Math.sqrt(maxPixels) / Math.sqrt(curPixels);\n            canvas.width = img.width * scale;\n            canvas.height = img.height * scale;\n            const ctx = canvas.getContext('2d');\n            if (ctx) {\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                ctx.canvas.toBlob(\n                    (blob) => {\n                        const compressedFile = new File([blob], fileName, {\n                            type: 'image/jpeg',\n                            lastModified: Date.now()\n                        });\n                        // console.log(`Generated ${fileName} (${compressedFile.size}Bytes)`);\n                        onSuccess(compressedFile);\n                    },\n                    'image/jpeg',\n                    1\n                );\n            } else {\n                if (onError) {\n                    onError('Invalid context');\n                }\n            }\n        };\n        reader.onerror = (error) => {\n            console.log(error);\n            if (onError) {\n                onError('Error compressing image.');\n            }\n        };\n    };\n    reader.readAsDataURL(file);\n};\n\nconst Dragger = styled(Upload.Dragger)`\n    &&& {\n        .ant-upload-drag {\n            height: 260px;\n        }\n        .ant-upload-btn {\n            padding: 0;\n        }\n    }\n`;\n\nconst DraggerMessage = styled.div`\n    padding: ${({ theme }) => `${theme.spacing.md} 0`};\n`;\n\nconst DraggerImg = styled.img`\n    max-height: ${({ theme }) => `calc(267px - ${theme.spacing.xxs} - ${theme.spacing.xxs})`};\n    max-width: ${({ theme }) => `calc(100% - ${theme.spacing.xxs} - ${theme.spacing.xxs})`};\n    padding: ${({ theme }) => theme.spacing.xxs};\n`;\n\nexport async function blobToString(blob) {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader();\n        reader.onloadend = () => {\n            var base64String = reader.result;\n            // Base64 Encoded String without additional data: Attributes.\n            resolve(base64String.substr(base64String.indexOf(',') + 1));\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    })\n}\n","import styled from 'styled-components';\nimport ReactTooltip from 'react-tooltip';\n\nexport const Tooltip = styled(ReactTooltip)`\n  && {\n    &,\n    span {\n      text-rendering: geometricPrecision;\n      font-size: ${({theme}) => theme.typography.bodySmall.fontSize};\n      color: ${({theme}) => theme.typography.bodySmall.contrastColor};\n      line-height:  ${({theme}) => theme.typography.bodySmall.lineHeight};\n    }\n  }\n`;\n\nexport const ColorizedToken = styled.span`\n  background-color: ${props => props.backgroundColor};\n  padding: 1px;\n  margin: 1px;\n  display: inline-block;\n  border-radius: 3px;\n  font-weight: normal;\n`;\n\n// red token used to represent deletion in InputReduction and replacement in HotFlip\nexport const RedToken = styled.span`\n  background-color: #FF5733;\n  padding: 1px;\n  margin: 1px;\n  display: inline-block;\n  border-radius: 3px;\n  font-weight: normal;\n`;\n\n// green token used to represent addition in HotFlip\nexport const GreenToken = styled.span`\n  background-color: #26BD19;\n  padding: 1px;\n  margin: 1px;\n  display: inline-block;\n  border-radius: 3px;\n  font-weight: normal;\n`;\n\n// green token used to represent addition in HotFlip\nexport const TransparentToken = styled.span`\n  background-color: \"transparent\";\n  padding: 1px;\n  margin: 1px;\n  display: inline-block;\n  border-radius: 3px;\n  font-weight: normal;\n`;\n\n// all white (the UI doesn't display it) token used in InputReduction to show removal\nexport const BlankToken = styled.span`\n  background-color: transparent;\n  color: white;\n  padding: 1px;\n  margin: 1px;\n  display: inline-block;\n  border-radius: 3px;\n`;","import styled, { css } from 'styled-components';\nimport { Input, Select } from '@allenai/varnish';\n\nexport const FormField = styled.div`\n  margin-top: ${({theme}) => theme.spacing.md};\n  transition: margin .2s ease;\n\n  @media (max-height: ${({theme}) => theme.breakpoints.md}) {\n    margin-top: ${({theme}) => theme.spacing.xs};\n  }\n`;\n\nexport const FormLabel = styled.label`\n  display: block;\n  font-weight: ${({theme}) => theme.typography.bodyBold.fontWeight};\n  margin-top: ${({theme}) => theme.spacing.xs};\n  transition: font-size .2s ease;\n`;\n\nconst baseInputStyles = css`\n  width: 100%;\n  margin-top: ${({theme}) => theme.spacing.xs};\n  display: block;\n  transition: min-height .2s ease, opacity .2s ease;\n\n  &:focus {\n    outline: 0;\n    box-shadow: 0 0 ${({theme}) => theme.spacing.md} ${({theme}) => theme.palette.primary};\n  }\n\n  @media (max-height: ${({theme}) => theme.breakpoints.md}) {\n    margin-top: ${({theme}) => theme.spacing.xxs};\n  }\n`;\n\nexport const FormTextArea = styled(Input.TextArea)`\n  && {\n    ${baseInputStyles}\n\n    resize: vertical;\n    min-height: 5.4em;\n\n    @media (max-height: ${({theme}) => theme.breakpoints.md}) {\n      min-height: 4.4em;\n    }\n  }\n`;\n\nexport const FormInput = styled(Input)`\n  ${baseInputStyles}\n`;\n\nexport const FormSelect = styled(Select)`\n  ${baseInputStyles}\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button, Select, Radio } from '@allenai/varnish'\nimport RightOutlined from '@ant-design/icons/RightOutlined';\n\nimport BeamSearch from './BeamSearch'\nimport { ImageParamControl, blobToString } from './ImageParamControl';\nimport { Tooltip } from './Shared'\nimport '../css/Button.css'\nimport { FormField, FormLabel, FormInput, FormTextArea, FormSelect } from './Form';\n\nconst PATTERN_NON_WORD_CHAR = /\\W/;\nconst PATTERN_WORD_CHAR = /\\w/;\nconst ELLIPSIS = '…';\nconst EXAMPLE_NAME_SEPARATOR = '@@';\nconst DEFAULT_OPTION_GROUP = \"DEFAULT_OPTION_GROUP\";\nconst TOOLTIP_ID = \"model-tooltip\";\n\n/**\n * Truncates the provided text such that no more than limit characters are rendered and adds an\n * ellipsis upon truncation.  If the text is shorter than the provided limit, the full text is\n * returned.\n *\n * @param {string} text The text to truncate.\n * @param {number} limit The maximum number of characters to show.\n *\n * @return {string} the truncated text, or full text if it's shorter than the provided limit.\n */\nconst truncateText = (text, limit = 60) => {\n    if (typeof limit !== 'number') {\n      throw new Error('limit must be a number');\n    }\n    limit -= ELLIPSIS.length;\n    if (text.length > limit) {\n      while (\n        limit > 1 &&\n        (!PATTERN_WORD_CHAR.test(text[limit-1]) || !PATTERN_NON_WORD_CHAR.test(text[limit]))\n      ) {\n        limit -= 1;\n      }\n      if (limit === 1) {\n        return text;\n      } else {\n        return text.substring(0, limit) + ELLIPSIS;\n      }\n    } else {\n      return text;\n    }\n  }\n\n// Create a dropdown \"snippet\" for an example.\n// If the example has a field called \"snippet\", use that;\n// Otherwise, take the first field and truncate if necessary.\nconst makeSnippet = (example, fields, maxLen = 60) => {\n    if (example.snippet) {\n        return example.snippet\n    } else {\n        const fieldName = fields[0].name\n        const snippet = example[fieldName]\n        return truncateText(snippet, maxLen)\n    }\n}\n\nclass DemoInput extends React.Component {\n    constructor(props) {\n        super(props)\n\n        const { examples, fields, inputState, runModel } = props\n        if (!Array.isArray(examples[0])) {\n          // TODO(mattg,jonb): Change this type to be [{\"default\": examples}]. Doing this requires\n          // updating all of the other demos, and is probably best done by adding some kind of\n          // Examples class, with a function like AddExample(data, optional group name).\n          this.normalizedExamples = [[DEFAULT_OPTION_GROUP, examples]]\n        } else {\n          this.normalizedExamples = examples\n        }\n\n        // Populate state using (a copy of) provided values.\n        this.state = inputState ? {...inputState} : {}\n\n        // What happens when you change the example dropdown\n        this.handleExampleChange = eVal => {\n            if (eVal !== \"-1\") {\n                const { groupIndex, exampleIndex } = decodeExampleName(eVal)\n                const example = this.normalizedExamples[groupIndex][1][exampleIndex]\n                // Because the field names vary by model, we need to be indirect.\n                let stateUpdate = {}\n\n                // For each field,\n                fields.forEach(({name}) => {\n                    // if the chosen example has a value for that field,\n                    if (example[name] !== undefined) {\n                        // include it in the update.\n                        stateUpdate[name] = example[name];\n                    }\n                })\n\n                // And now pass the updates to setState.\n                this.setState(stateUpdate)\n            }\n        }\n\n        // What happens when you change an input. This works for text\n        // inputs and also select inputs. The first argument is\n        // the field name to update.\n        this.handleInputChange = fieldName => e => {\n            const stateUpdate = {}\n            stateUpdate[fieldName] = e.target.value;\n            this.setState(stateUpdate)\n        }\n\n        // Select input selection\n        this.handleSelectChange = fieldName => eVal => {\n            const stateUpdate = {}\n            stateUpdate[fieldName] = eVal;\n            this.setState(stateUpdate)\n        }\n\n        // Radio input selection\n        this.handleRadioChange = fieldName => e => {\n            const stateUpdate = {}\n            stateUpdate[fieldName] = e.target.value;\n            this.setState(stateUpdate)\n        }\n\n        // Handler that runs the model if 'Enter' is pressed.\n        this.runOnEnter = e => {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                e.stopPropagation();\n                runModel(this.cleanInputs())\n            }\n        }\n\n        // Some of the inputs (e.g. interactive beam search)\n        // depend on the previous outputs, so when we do a new run\n        // we need to clear them out.\n        this.cleanInputs = () => {\n            const inputs = {...this.state}\n\n            fields.forEach((field) => {\n                (field.dependentInputs || []).forEach((name) => {\n                    delete inputs[name]\n                })\n            })\n\n            return inputs\n        }\n    }\n\n    render() {\n        const { fields, selectedModel, outputState, responseData, inputState, exampleLabel } = this.props\n\n        // Only enable running the model if every required field has a value.\n        const canRun = fields.every(field => field.optional || this.state[field.name])\n\n        // Fields that are inputs only.\n        const inputs = []\n\n        // Fields that are both inputs and outputs (e.g. beam search). These will be\n        // rendered below the RUN button.\n        const inputOutputs = []\n\n        fields.forEach((field, idx) => {\n            // The HTML id for this input:\n            const inputId = `input--${selectedModel}-${field.name}`\n            const label = field.label ? <FormLabel htmlFor={`#${inputId}`}>{field.label}</FormLabel> : null\n\n            let input = null;\n\n            switch (field.type) {\n                case \"IMAGE_UPLOAD\":\n                    input = (\n                        <ImageParamControl\n                            onChange = {(img)=>{\n                                blobToString(img.image).then(s => {\n                                    img.image_base64 = s\n                                    const stateUpdate = {}\n                                    stateUpdate[field.name] = img\n                                    this.setState(stateUpdate)\n                                })\n                                .catch(e => console.log(e))\n                            }}\n                            modelParams = {this.state[field.name] || {}}\n                        />\n                    )\n                    break\n\n                case \"TEXT_AREA\":\n                case \"TEXT_INPUT\":\n                    // Both text area and input have the exact same properties.\n                    const props = {\n                        onChange: this.handleInputChange(field.name),\n                        onKeyDown: canRun ? this.runOnEnter : undefined,\n                        id: inputId,\n                        type: \"text\",\n                        required: true,\n                        autoFocus: idx === 0,\n                        placeholder: field.placeholder || \"\",\n                        value: this.state[field.name],\n                        disabled: outputState === \"working\",\n                        maxLength: field.maxLength || (field.type === \"TEXT_INPUT\" ? 1000 : 100000)\n                    }\n\n                    input = field.type === \"TEXT_AREA\" ? <FormTextArea {...props}/> : <FormInput {...props}/>\n                    break\n\n                case \"SELECT\":\n                    input = (\n                        // If we have no value for this select, use the first option.\n                        <FormSelect value={this.state[field.name] || field.options[0]}\n                                onChange={this.handleSelectChange(field.name)}\n                                dropdownMatchSelectWidth = {false}\n                                disabled={outputState === \"working\"}>\n                            {\n                                field.options.map((value) => (\n                                    <Select.Option key={value} value={value}>{value}</Select.Option>\n                                ))\n                            }\n                        </FormSelect>\n                    )\n                    break\n\n                case \"BEAM_SEARCH\":\n                    if (outputState !== \"working\") {\n                        const { best_action_sequence, choices } = responseData || {}\n                        const runSequenceModel = (extraState) => this.props.runModel({...this.state, ...extraState}, true)\n\n                        input = <BeamSearch inputState={inputState}\n                                            bestActionSequence={best_action_sequence}\n                                            choices={choices}\n                                            runSequenceModel={runSequenceModel}/>\n                    }\n                    break\n\n                case \"RADIO\":\n                    input = (\n                        // If we have no value for this select, use the first option.\n                        <Radio.Group\n                            vertical={true}\n                            name={inputId}\n                            value={this.state[field.name] || (field.options[0] && field.options[0].name)}\n                            onChange={this.handleRadioChange(field.name)}\n                            disabled={outputState === \"working\"}>\n                            {\n                                field.options.map((opt) => (\n                                    <Radio key={opt.name} value={opt.name}>\n                                        <span data-tip={opt.desc} data-for={TOOLTIP_ID}> {opt.name} </span>\n                                    </Radio>\n                                ))\n                            }\n                      </Radio.Group>\n                    )\n                    break\n                default:\n                    console.error(\"unknown field type: \" + field.type)\n            }\n\n            const div = (\n                <FormField key={field.name}>\n                    {label}\n                    {input}\n                </FormField>\n            )\n\n            // By default we assume a field is just an input,\n            // unless it has the ``inputOutput`` attribute set.\n            if (field.inputOutput) {\n                inputOutputs.push(div)\n            } else {\n                inputs.push(div)\n            }\n        })\n\n\n        return (\n            <React.Fragment>\n                <FormInstructions>\n                    <span>{exampleLabel ? exampleLabel : 'Enter text or'}</span>\n                    <Select\n                        dropdownMatchSelectWidth = {false}\n                        disabled={outputState === \"working\"}\n                        onChange={this.handleExampleChange}\n                        defaultValue=\"-1\">\n                        <Select.Option value=\"-1\">Choose an example...</Select.Option>\n                        {this.normalizedExamples.map((exampleInfo, groupIndex) => {\n                            return SelectOptionGroup(exampleInfo, groupIndex, fields)\n                        })}\n                    </Select>\n                </FormInstructions>\n                {inputs}\n                <RunButtonArea>\n                    <Button\n                      type=\"primary\"\n                      disabled={!canRun || outputState === \"working\"}\n                      onClick={ () => this.props.runModel(this.cleanInputs()) }>Run\n                        <RightOutlined />\n                    </Button>\n                </RunButtonArea>\n                {inputOutputs}\n                <Tooltip multiline id={TOOLTIP_ID} />\n            </React.Fragment>\n        )\n    }\n}\n\nconst FormInstructions = styled.div`\n  display: grid;\n  margin: ${({theme}) => `${theme.spacing.md} 0 ${theme.spacing.md}`};\n  transition: margin .2s ease;\n  grid-template-columns: auto 1fr;\n  gap: ${({theme}) => theme.spacing.xs};\n  align-items: center;\n\n  span {\n    color: ${({theme}) => theme.palette.text.secondary};\n  }\n\n  @media screen and (max-height: ${({theme}) => theme.breakpoints.md}) {\n    margin: ${({theme}) => `${theme.spacing.xs} 0 ${theme.spacing.xs}`};\n  }\n  @media screen and (max-width: ${({theme}) => theme.breakpoints.sm}) {\n    grid-template-columns: auto;\n  }\n`;\n\nconst RunButtonArea = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  margin-top: ${({theme}) => theme.spacing.md};\n  svg {\n    fill: ${({theme}) => theme.palette.common.white.hex};\n  }\n`;\n\nfunction SelectOptionGroup(exampleInfo, groupIndex, fields) {\n  const exampleType = exampleInfo[0]\n  const examples = exampleInfo[1]\n  if (!exampleType || exampleType === DEFAULT_OPTION_GROUP) {\n      return RenderOptions(examples, groupIndex, fields)\n  } else {\n      return (\n          <Select.OptGroup label={exampleType} key={groupIndex}>\n              {RenderOptions(examples, groupIndex, fields)}\n          </Select.OptGroup>\n      )\n  }\n}\n\nfunction RenderOptions(examples, groupIndex, fields) {\n    return examples.map((example, exampleIndex) => {\n        const encodedName = encodeExampleName(groupIndex, exampleIndex)\n        return (\n            <Select.Option value={encodedName} key={encodedName}>{makeSnippet(example, fields)}</Select.Option>\n        )\n    })\n}\n\nfunction encodeExampleName(groupIndex, exampleIndex) {\n  return groupIndex + EXAMPLE_NAME_SEPARATOR + exampleIndex\n}\n\nfunction decodeExampleName(name) {\n  const parts = name.split(EXAMPLE_NAME_SEPARATOR)\n  return {\n    groupIndex: parts.length ? parts[0] : undefined,\n    exampleIndex: parts.length > 0 ? parts[1] : undefined,\n  }\n}\n\nexport { DemoInput as default, truncateText }\n","import styled from 'styled-components';\n\nexport const UsageSection = styled.div`\n    margin: ${({ theme }) => `${theme.spacing.md} 0 ${theme.spacing.lg}`};\n`;\n","import styled from 'styled-components';\n\nimport { FormLabel } from './Form';\n\nexport const UsageHeader = styled(FormLabel)`\n    margin: 0 0 ${({ theme }) => theme.spacing.xs};\n`;\n","import styled from 'styled-components';\n\n/**\n * Create a little padding and border around code samples in the\n * usage sections, for readability and spacing.\n */\nexport const UsageCode = styled.div`\n    padding: ${({ theme }) => theme.spacing.sm};\n    border: 1px solid ${({ theme }) => theme.palette.border.main};\n    margin: ${({ theme }) => `${theme.spacing.sm} 0 ${theme.spacing.md}`};\n\n    pre {\n        margin: 0;\n    }\n`;\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { vs } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\n/*******************************************************************************\n  <SyntaxHighlight /> Component\n\n  This component is a wrapper for the `react-syntax-highlighter` component.\n  The goal was to keep the highlight styling consistent and as easy to leverage\n  as possible. This takes the style-related props out of the equation for\n  general use throughout AllenNLP demos. Global code style can be managed here.\n\n  Documentation for `react-syntax-highlighter` can be found on NPM:\n  https://www.npmjs.com/package/react-syntax-highlighter\n\n  Supported Languages:\n  https://github.com/conorhastings/react-syntax-highlighter/blob/HEAD/AVAILABLE_LANGUAGES_HLJS.MD\n\n  Supported Styles:\n  https://github.com/conorhastings/react-syntax-highlighter/blob/HEAD/AVAILABLE_STYLES_HLJS.MD\n\n  Demo:\n  https://highlightjs.org/static/demo/\n\n*******************************************************************************/\n\nexport default class SyntaxHighlight extends React.Component {\n  render() {\n    const {\n      language, // string (optional, will auto-detct if not set explicitly)\n      children  // string | object\n    } = this.props;\n\n    // Overriding the unwanted inline styles that `react-syntax-highlighter` adds by default:\n    const customStyle = {\n      background: 'transparent',\n      padding: '0'\n    };\n\n    return (\n      <SyntaxHighlighter\n        language={language}\n        style={vs}\n        customStyle={customStyle}>\n        {children}\n      </SyntaxHighlighter>\n    );\n  }\n}\n","import React from 'react';\n\nimport { UsageSection } from './UsageSection';\nimport { UsageHeader } from './UsageHeader';\nimport { UsageCode } from './UsageCode';\nimport SyntaxHighlight from './highlight/SyntaxHighlight';\n\nexport const Usage = (usage) => ( // usage: {installNote?: Element, installCommand?: string, bashNote?: Element, bashCommand?: string, pythonNote?: Element, pythonCommand?: string, predictorNote?: Element, predictorCommand?: string, evaluationNote?: Element, evaluationCommand?: string}\n    <React.Fragment>\n        <UsageSection>\n            <UsageHeader>Installing AllenNLP</UsageHeader>\n            {usage.installNote ? <p>{usage.installNote}</p> : null}\n            {usage.installCommand\n                ? <UsageCode>\n                    <SyntaxHighlight language=\"bash\">{usage.installCommand}</SyntaxHighlight>\n                </UsageCode>\n                : null}\n            <UsageHeader>Prediction</UsageHeader>\n            <strong>On the command line (bash):</strong>\n            {usage.bashNote ? <p>{usage.bashNote}</p> : null}\n            {usage.bashCommand\n                ? <UsageCode>\n                    <SyntaxHighlight language=\"bash\">{usage.bashCommand}</SyntaxHighlight>\n                </UsageCode>\n                : null}\n            <strong>As a library (Python):</strong>\n            {usage.pythonNote ? <p>{usage.pythonNote}</p> : null}\n            {usage.pythonCommand\n                ? <UsageCode>\n                    <SyntaxHighlight language=\"python\">{usage.pythonCommand}</SyntaxHighlight>\n                </UsageCode>\n                : null}\n        </UsageSection>\n        <UsageSection>\n            <UsageHeader>Evaluation</UsageHeader>\n            {usage.evaluationNote ? <p>{usage.evaluationNote}</p> : null}\n            {usage.evaluationCommand\n                ? <UsageCode>\n                    <SyntaxHighlight language=\"python\">{usage.evaluationCommand}</SyntaxHighlight>\n                </UsageCode>\n                : null}\n        </UsageSection>\n        <UsageSection>\n            <UsageHeader>Training</UsageHeader>\n            {usage.trainingNote ? <p>{usage.trainingNote}</p> : null}\n            {usage.trainingCommand\n                ? <UsageCode>\n                    <SyntaxHighlight language=\"python\">{usage.trainingCommand}</SyntaxHighlight>\n                </UsageCode>\n                : null}\n        </UsageSection>\n    </React.Fragment>\n)\n","import React from 'react'\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport { Tabs, Select, Typography } from '@allenai/varnish';\nimport qs from 'querystring';\n\nimport { PaneTop, PaneBottom } from './Pane'\nimport ModelIntro from './ModelIntro';\nimport DemoInput from './DemoInput'\nimport { FormSelect, FormField, FormLabel } from './Form';\nimport { Usage } from './Usage';\n\nclass Model extends React.Component {\n    constructor(props) {\n      super(props);\n\n      const { requestData, responseData, interpretData, attackData } = props;\n\n      this.state = {\n        outputState: responseData ? \"received\" : \"empty\", // valid values: \"working\", \"empty\", \"received\", \"error\"\n        requestData: requestData,\n        responseData: responseData,\n        interpretData: interpretData,\n        attackData: attackData,\n        selectedSubModel: requestData ? requestData.model : undefined\n      };\n\n      this.runModel = this.runModel.bind(this)\n      this.interpretModel = this.interpretModel.bind(this)\n      this.attackModel = this.attackModel.bind(this)\n    }\n\n    runModel(inputs, disablePermadata = false) {\n      const { selectedModel, apiUrl } = this.props\n\n      this.setState({outputState: \"working\", interpretData: undefined, attackData: undefined});\n\n      // replace whatever submodel is in 'model' with 'selectedSubModel'\n      const {model, ...restOfTheInputs} = inputs;\n      const inputsWithSubModel = {model: this.state.selectedSubModel, ...restOfTheInputs};\n\n      // If we're not supposed to generate a new permalink, add the `record=false` query string\n      // argument.\n      let url;\n      if (disablePermadata) {\n        const u = new URL(apiUrl(inputsWithSubModel), window.location.origin);\n        const queryString = { ...qs.parse(u.search), record: false };\n        u.search = qs.stringify(queryString);\n        url = u.toString();\n      } else {\n        url = apiUrl(inputsWithSubModel);\n      }\n\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(inputsWithSubModel)\n      }).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Predict call failed.');\n        }\n        return response.json();\n      }).then((json) => {\n        this.props.updateData(inputsWithSubModel, json)\n        this.setState({outputState: \"received\"})\n\n        if (!disablePermadata) {\n          // Put together the appropriate request body.\n          const u = new URL(url, window.location.origin);\n          const modelId = u.pathname.split('/')[2];\n          if (!modelId) {\n            throw new Error(`Malformed model endpoint url: ${url}`);\n          }\n          const requestBody = JSON.stringify({\n            // TODO: `selectedModel` is a misnomer, it's actually the task name. We should fix\n            // this.\n            task_name: selectedModel,\n            model_id: modelId,\n            request_data: inputsWithSubModel\n          });\n\n          fetch(`/api/permalink/`, {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: requestBody\n          }).then(r => r.json()).then(slug => {\n            const newPath = `/${selectedModel}/${slug}`;\n            this.props.history.push(newPath);\n          });\n        }\n      }).catch((error) => {\n        this.setState({outputState: \"error\"});\n        console.error(error);\n      });\n    }\n\n    interpretModel = (inputs, interpreter) => () => {\n      const { apiUrlInterpret } = this.props\n      return fetch(apiUrlInterpret(inputs, interpreter), {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({...inputs, ...{interpreter}})\n      }).then((response) => {\n        return response.json();\n      }).then((json) => {\n        const stateUpdate = { ...this.state }\n        stateUpdate['interpretData'] = {...stateUpdate['interpretData'], [interpreter]: json}\n        this.setState(stateUpdate)\n      })\n    }\n\n    attackModel = (inputs, attacker, inputToAttack, gradInput) => ({target}) => {\n      const attackInputs = {...{attacker}, ...{inputToAttack}, ...{gradInput}}\n      if (target !== undefined) {\n        attackInputs['target'] = target\n      }\n      const { apiUrlAttack } = this.props\n      const url = apiUrlAttack(inputs, attacker)\n\n      // Prepare the request body.\n      const requestBody = {\n        inputs: inputs,\n        input_field_to_attack: inputToAttack,\n        grad_input_field: gradInput\n      };\n\n      return fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody)\n      }).then((response) => {\n        return response.json();\n      }).then((json) => {\n        const stateUpdate = { ...this.state }\n        stateUpdate['attackData'] = {...stateUpdate['attackData'], [attacker]: json}\n        this.setState(stateUpdate)\n      })\n    }\n\n    componentDidMount() {\n      if (this.state.requestData && !this.state.responseData) {\n        this.runModel(this.state.requestData, true);\n      }\n    }\n\n    handleSubModelChange = (val) => {\n      this.setState({selectedSubModel: val});\n    }\n\n    render() {\n        const { title, description, examples, fields, selectedModel, Output, requestData, responseData, defaultUsage, exampleLabel } = this.props;\n        const { outputState } = this.state;\n\n        // pull 'model' field out since we dont want to render it as part of the model inputs\n        const [[subModel], fieldsMinusModel] = _.partition(fields, ['name', 'model']);\n        const demoInput = <DemoInput selectedModel={selectedModel}\n                                     examples={examples}\n                                     fields={fieldsMinusModel}\n                                     inputState={requestData}\n                                     responseData={responseData}\n                                     outputState={outputState}\n                                     runModel={this.runModel}\n                                     exampleLabel={exampleLabel}/>\n\n        const outputProps = {...this.state, requestData, responseData}\n        const demoOutput = requestData && responseData ? <Output {...outputProps} interpretModel={this.interpretModel} attackModel={this.attackModel}/> : null\n\n        // grab usage from default or from selected submodel\n        let subModelUsage = defaultUsage;\n        let subModelDescription = '';\n        if(subModel) {\n            const selectedSubModel = subModel.options.filter(o => o.modelId === (this.state.selectedSubModel || subModel.options[0].modelId));\n            if(selectedSubModel.length) {\n              subModelUsage = selectedSubModel[0].usage || defaultUsage;\n              subModelDescription =  selectedSubModel[0].desc;\n            }\n        }\n\n        const tabs = [ demoInput, subModelUsage ].filter(tabContent => tabContent !== undefined);\n\n        return (\n            <Wrapper className=\"pane__horizontal model\">\n                <PaneTop>\n                  <div className=\"model__content\">\n                    <ModelIntro\n                      title={title}\n                      description={description}/>\n\n                    {subModel ?\n                      <FormField>\n                        <FormLabel>Model</FormLabel>\n                        <FormSelect value={this.state.selectedSubModel || subModel.options[0].modelId}\n                          onChange={this.handleSubModelChange}\n                          dropdownMatchSelectWidth = {false}\n                          disabled={outputState === \"working\"}\n                          optionLabelProp=\"label\"\n                          listHeight={370}>\n                          {\n                            subModel.options.map((value) => (\n                              <Select.Option key={value.modelId} value={value.modelId} label={value.name}>\n                                <>\n                                  <Typography.BodyBold>{value.name}</Typography.BodyBold>\n                                  <OptDesc>{value.desc}</OptDesc>\n                                </>\n                              </Select.Option>\n                            ))\n                          }\n                        </FormSelect>\n                        <ModelDesc>{subModelDescription}</ModelDesc>\n                      </FormField>\n                    : null}\n\n                    {tabs.length > 1 ? (\n                      <Tabs defaultActiveKey=\"demo\" animated={false}>\n                        <Tabs.TabPane tab=\"Demo\" key=\"demo\">\n                          {demoInput}\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Usage\" key=\"usage\">\n                          <Usage {...subModelUsage} />\n                        </Tabs.TabPane>\n                      </Tabs>\n                    ) : demoInput}\n                  </div>\n                </PaneTop>\n                <PaneBottom outputState={outputState}>{demoOutput}</PaneBottom>\n            </Wrapper>\n        )\n    }\n}\n\nconst ModelDesc = styled.p`\n  margin-bottom: ${({theme}) => theme.spacing.md};\n`;\n\nconst OptDesc = styled.div`\n  max-width: ${({theme}) => theme.breakpoints.md};\n  white-space: break-spaces;\n`;\n\nexport const Wrapper = styled.div`\n  background: ${({theme}) => theme.palette.background.light};\n  display: block;\n  width: 100%;\n  max-width: ${({theme}) => theme.breakpoints.xl};\n`;\n\nexport default Model\n","import React from 'react'\n\nimport { FormField, FormLabel } from './Form';\n\n// A labeled output field with children\nconst OutputField = ({label, classes, children, suppressSummary}) => {\n    const summaryClass = (label && !suppressSummary) ? 'model__content__summary ' : ''\n    const extraClasses = classes || ''\n    const className = summaryClass + extraClasses\n\n    return (\n        <FormField>\n            {label ? <FormLabel>{label}</FormLabel> : null}\n            {className ? (\n                <div className={className}>\n                    {children}\n                </div>\n                ) : children}\n        </FormField>\n    )\n}\n\nexport default OutputField\n","import React from 'react';\nimport styled from 'styled-components';\nimport {withRouter} from 'react-router-dom';\nimport {Collapse} from '@allenai/varnish';\n\nimport HeatMap from '../HeatMap'\nimport Model from '../Model'\nimport OutputField from '../OutputField'\nimport SyntaxHighlight from '../highlight/SyntaxHighlight.js';\n\nconst title = \"Code Summarization\";\n\n// description for task\nconst description = (\n    <span>\n        <span>\n        Code summarization is the task of summarizing code snippets with natural language descriptions.\n            more description...\n        </span>\n    </span>\n)\n\n\n// TODO: NCC cli\nconst bashCommand = (modelUrl) => {\n    return `echo '{\"code\": \"def addition(a, b):\\\\n\\\\treturn a+b\"}' | \\\\\nallennlp predict ${modelUrl} -`\n}\n\n// TODO: NCC predictor\nconst pythonCommand = (modelUrl) => {\n    return `from allennlp.predictors.predictor import Predictor\nimport allennlp_models.rc\npredictor = Predictor.from_path(\"${modelUrl}\")\npredictor.predict(\n  passage=\"The Matrix is a 1999 science fiction action film written and directed by The Wachowskis, starring Keanu Reeves, Laurence Fishburne, Carrie-Anne Moss, Hugo Weaving, and Joe Pantoliano.\",\n  question=\"Who stars in The Matrix?\"\n)`\n}\n\n// tasks that have only 1 model, and models that do not define usage will use this as a default\n// undefined is also fine, but no usage will be displayed for this task/model\nconst defaultUsage = undefined;\n\n// TODO: define model\nconst buildUsage = (modelUrl, configPath) => {\n    // model file, *.pt\n    const fullModelUrl = `https://storage.googleapis.com/allennlp-public-models/${modelUrl}`;\n    // model config, *.yml\n    const fullConfigPath = `https://raw.githubusercontent.com/allenai/allennlp-models/v1.0.0/training_config/rc/${configPath}`;\n    return {\n        installCommand: 'pip install ncc==0.1.0',\n        bashCommand: bashCommand(fullModelUrl),\n        pythonCommand: pythonCommand(fullModelUrl),\n        evaluationCommand: `allennlp evaluate \\\\\n    ${fullModelUrl} \\\\\n    https://s3-us-west-2.amazonaws.com/allennlp/datasets/squad/squad-dev-v1.1.json`,\n        trainingCommand: `allennlp train ${fullConfigPath} -s output_path`\n    }\n}\n\n// models\nconst taskModels = [\n    {\n        name: \"Seq2Seq\",\n        desc: <span>\n      This model is the baseline model described\n      in <a href=\"https://arxiv.org/pdf/1409.3215.pdf\">Sequence to Sequence Learning with Neural Networks</a>.\n      It uses a RNN based encoder as well as a RNN based encoder for text generation task.\n      </span>,\n        modelId: \"code-summarization-seq2seq\",\n        usage: buildUsage(\"fine-grained-ner.2020-06-24.tar.gz\")\n    },\n    {\n        name: \"transformer\",\n        desc: <span>\n      Transformer, proposed in <a href=\"https://arxiv.org/abs/1603.01360\">Attention Is All You Need</a>,\n             employs self-attention for neural machine translation task .\n      </span>,\n        modelId: \"code-summarization-transformer\",\n        usage: buildUsage(\"fine-grained-ner.2020-06-24.tar.gz\")\n    }\n]\n\nconst fields = [\n    {\n        name: \"code\", label: \"Code\", type: \"TEXT_INPUT\",\n        placeholder: `E.g. \"def addition(a, b):\\\\n\\\\treturn a+b\"`\n    },\n    {name: \"model\", label: \"Model\", type: \"RADIO\", options: taskModels, optional: true}\n]\n\nconst ActionInfo = ({action, tokenized_utterance}) => {\n    const utterance_attention = action['utterance_attention'].map(x => [x]);\n    const considered_actions = action['considered_actions'];\n    const action_probs = action['action_probabilities'].map(x => [x]);\n\n    const probability_heatmap = (\n        <div className=\"heatmap, heatmap-tile\">\n            <HeatMap colLabels={['Prob']} rowLabels={considered_actions} data={action_probs}/>\n        </div>\n    );\n\n    const utterance_attention_heatmap = utterance_attention.length > 0 ? (\n        <div className=\"heatmap, heatmap-tile\">\n            <HeatMap colLabels={['Prob']} rowLabels={tokenized_utterance} data={utterance_attention}/>\n        </div>\n    ) : (\n        \"\"\n    )\n\n    return (\n        <div className=\"flex-container\">\n            {probability_heatmap}\n            {utterance_attention_heatmap}\n        </div>\n    )\n}\n\n\nconst Output = ({responseData}) => {\n    const {predicted_actions, entities, linking_scores, predicted_sql_query, tokenized_utterance} = responseData\n\n    let query, internals\n\n    if (predicted_sql_query.length > 1) {\n        query = <SyntaxHighlight>{predicted_sql_query}</SyntaxHighlight>\n        internals = (\n            <OutputField label=\"Model internals\">\n                <Collapse defaultActiveKey={['default']}>\n                    <Collapse.Panel header=\"Predicted production rules\" key=\"default\">\n                        <PanelDesc>\n                            The sequence of grammar production rules predicted by the model, which together determine an\n                            abstract syntax tree for the program shown above.\n                        </PanelDesc>\n                        {predicted_actions.map((action, action_index) => (\n                            <Collapse key={\"action_\" + action_index}>\n                                <Collapse.Panel header={action['predicted_action']}>\n                                    <ActionInfo action={action} tokenized_utterance={tokenized_utterance}/>\n                                </Collapse.Panel>\n                            </Collapse>\n                        ))}\n                    </Collapse.Panel>\n                    <Collapse.Panel header=\"Entity linking scores\">\n                        <HeatMap colLabels={tokenized_utterance} rowLabels={entities} data={linking_scores}/>\n                    </Collapse.Panel>\n                </Collapse>\n            </OutputField>\n        )\n    } else {\n        query = <p>No query found!</p>\n        internals = null\n    }\n\n    return (\n        <div className=\"model__content answer\">\n            <OutputField label=\"SQL Query\" suppressSummary>\n                {query}\n            </OutputField>\n            {internals}\n        </div>\n    )\n}\n\nconst PanelDesc = styled.div`\n  margin-bottom: ${({theme}) => theme.spacing.sm};\n`;\n\nconst examples = [\n    {\n        code: \"def addition(a, b):\\\\n\\\\treturn a+b\",\n    },\n    {\n        code: \"def addition(a, b):\\\\n\\\\treturn a+b\",\n    },\n    {\n        code: \"def addition(a, b):\\\\n\\\\treturn a+b\",\n    },\n];\n\nconst apiUrl = () => `/api/atis-parser/predict`\n\nconst modelProps = {apiUrl, title, description, fields, examples, Output}\n\nexport default withRouter(props => <Model {...props} {...modelProps}/>)\n","// The interpreters\nexport const GRAD_INTERPRETER = 'simple_gradient'\nexport const IG_INTERPRETER = 'integrated_gradient'\nexport const SG_INTERPRETER = 'smooth_gradient'\n\n// The attackers\nexport const INPUT_REDUCTION_ATTACKER = 'input_reduction'\nexport const HOTFLIP_ATTACKER = 'hotflip'","import React from 'react';\nimport styled from 'styled-components';\nimport { createGlobalStyle }  from 'styled-components';\nimport colormap from 'colormap'\nimport { Popover, Link, Collapse } from '@allenai/varnish';\n\nimport { Tooltip, ColorizedToken } from './Shared';\nimport OutputField from './OutputField'\nimport {\n  GRAD_INTERPRETER,\n  IG_INTERPRETER,\n  SG_INTERPRETER\n  } from './InterpretConstants';\n\nconst TOOLTIP_ID = \"saliency-tooltip\";\n\nexport const getDescription = (interpreter) => {\n  let description = ''\n  if (interpreter === GRAD_INTERPRETER){\n      description = <p> See saliency map interpretations generated by <a href=\"https://arxiv.org/abs/1312.6034\" target=\"_blank\" rel=\"noopener noreferrer\">visualizing the gradient</a>. </p>\n  } else if (interpreter === IG_INTERPRETER){\n      description = <p> See saliency map interpretations generated using <a href=\"https://arxiv.org/abs/1703.01365\" target=\"_blank\" rel=\"noopener noreferrer\">Integrated Gradients</a>.</p>\n  } else if (interpreter === SG_INTERPRETER){\n      description = <p> See saliency map interpretations generated using <a href=\"https://arxiv.org/abs/1706.03825\" target=\"_blank\" rel=\"noopener noreferrer\">SmoothGrad</a>.</p>\n  }\n  return description;\n}\n\n\nconst getTokenWeightPairs = (grads, tokens) => {\n  return tokens.map((token, idx) => {\n    let weight = grads[idx]\n    // We do 1 - weight because the colormap is inverted\n    return { token, weight: 1 - weight }\n  })\n}\n\nconst PopoverWidthFix = createGlobalStyle`\n  .ant-popover{\n    max-width: 70%;\n  }\n`;\n\nexport const SaliencyMaps = ({interpretData, inputTokens, inputHeaders, interpretModel, requestData}) => {\n  const simpleGradData = interpretData.simple;\n  const integratedGradData = interpretData.ig;\n  const smoothGradData = interpretData.sg;\n  const popContent = (\n  <div>\n    <p>\n      Despite constant advances and seemingly super-human performance on constrained domains,\n      state-of-the-art models for NLP are imperfect. These imperfections, coupled with today's\n      advances being driven by (seemingly black-box) neural models, leave researchers and\n      practitioners scratching their heads asking, <i>why did my model make this prediction?</i>\n    </p>\n    <a href=\"https://allennlp.org/interpret\" target=\"_blank\" rel=\"noopener noreferrer\">Learn More</a>\n  </div>);\n  const interpretationHeader = (<>Model Interpretations\n    <PopoverWidthFix />\n    <Popover content={popContent} title=\"Model Interpretations\">\n      <WhatIsThis>What is this?</WhatIsThis>\n    </Popover></>)\n  return (\n    <>\n      <OutputField label={interpretationHeader}>\n        <Collapse>\n          <Collapse.Panel header=\"Simple Gradients Visualization\">\n            <SaliencyComponent interpretData={simpleGradData} inputTokens={inputTokens} inputHeaders={inputHeaders} interpretModel={interpretModel(requestData, GRAD_INTERPRETER)} interpreter={GRAD_INTERPRETER} />\n          </Collapse.Panel>\n          <Collapse.Panel header=\"Integrated Gradients Visualization\">\n            <SaliencyComponent interpretData={integratedGradData} inputTokens={inputTokens} inputHeaders={inputHeaders} interpretModel={interpretModel(requestData, IG_INTERPRETER)} interpreter={IG_INTERPRETER} />\n          </Collapse.Panel>\n          <Collapse.Panel header=\"SmoothGrad Visualization\">\n            <SaliencyComponent interpretData={smoothGradData} inputTokens={inputTokens} inputHeaders={inputHeaders} interpretModel={interpretModel(requestData, SG_INTERPRETER)} interpreter={SG_INTERPRETER}/>\n          </Collapse.Panel>\n        </Collapse>\n      </OutputField>\n  </>\n  )\n}\n\nexport class SaliencyComponent extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      topK: {all: 3}, // 3 words are highlighted by default\n      loading: false,\n    }\n\n    this.callInterpretModel = this.callInterpretModel.bind(this)\n    this.colorize = this.colorize.bind(this)\n    this.handleInputTopKChange = this.handleInputTopKChange.bind(this)\n    this.getTopKIndices = this.getTopKIndices.bind(this)\n  }\n\n  static defaultProps = {\n    colormapProps: {\n      colormap: 'copper',\n      format: 'hex',\n      nshades: 20\n    }\n  }\n\n  callInterpretModel = interpretModel => () => {\n    this.setState({ ...this.state, loading: true});\n    interpretModel().then(() => this.setState({ loading: false }));\n  }\n\n  colorize(tokensWithWeights, topKIdx) {\n    const {colormapProps} = this.props\n    // colormap package takes minimum of 6 shades\n    colormapProps.nshades =  Math.min(Math.max(colormapProps.nshades, 6), 72);\n    const colors = colormap(colormapProps)\n\n    let colorizedString = [];\n    tokensWithWeights.forEach((obj, idx) => {\n      colorizedString.push(\n        // Again, 1 -, in this case because low extreme is blue and high extreme is red\n        <label key={idx} data-tip={(1 - obj.weight).toFixed(3)} style={{ display: \"inline-block\" }} data-for={TOOLTIP_ID}>\n            <ColorizedToken backgroundColor={topKIdx.has(idx) ? colors[Math.round(obj.weight * (colormapProps.nshades - 1))] : 'transparent'} key={idx}>\n                {obj.token}\n            </ColorizedToken>\n        </label>\n      )\n    })\n    return colorizedString\n  }\n\n  // when the user changes the slider for input 1, update how many tokens are highlighted\n  handleInputTopKChange = inputIndex => e => {\n    let stateUpdate = Object.assign({}, this.state)\n    if (e.target.value.trim() === \"\") {\n      stateUpdate['topK'][inputIndex] = e.target.value\n    } else {\n      stateUpdate['topK'][inputIndex] = parseInt(e.target.value, 10)\n    }\n    this.setState(stateUpdate)\n  }\n\n  // Extract top K tokens by saliency value and return only the indices of the top tokens\n  getTopKIndices(tokensWithWeights, inputIndex) {\n    function gradCompare(obj1, obj2) {\n      return obj1.weight - obj2.weight\n    }\n\n    // Add indices so we can keep track after sorting\n    let indexedTokens = tokensWithWeights.map((obj, idx) => { return {...obj, ...{idx}} })\n    indexedTokens.sort(gradCompare)\n\n    const k = inputIndex in this.state.topK ? this.state.topK[inputIndex] : this.state.topK.all\n    const topKTokens = indexedTokens.slice(0, k)\n    return topKTokens.map(obj => obj.idx)\n  }\n\n  render() {\n    const { interpretData, inputTokens, inputHeaders, interpretModel, interpreter } = this.props\n    const description = getDescription(interpreter)\n\n    const runButton = <button\n                        type=\"button\"\n                        className=\"btn\"\n                        style={{margin: \"30px 0px\"}}\n                        onClick={this.callInterpretModel(interpretModel)}\n                       >\n                         Interpret Prediction\n                      </button>\n\n    let displayText = '';\n    if (interpretData === undefined) {\n      if (this.state.loading) {\n        displayText = <div><p style={{color: \"#7c7c7c\"}}>Loading interpretation...</p></div>\n      } else {\n        displayText = <div><p style={{color: \"#7c7c7c\"}}>Press \"interpret prediction\" to show the interpretation.</p>{runButton}</div>\n      }\n    } else {\n      const saliencyMaps = [];\n      for (let i = 0; i < inputTokens.length; i++) {\n        const grads = interpretData[i];\n        const tokens = inputTokens[i];\n        const header = inputHeaders[i];\n        const tokenWeights = getTokenWeightPairs(grads, tokens);\n        // indices with the top gradient values\n        const topKIdx = new Set(this.getTopKIndices(tokenWeights, i))\n        // the tokens highlighted based on their top values\n        const colorMap = this.colorize(tokenWeights, topKIdx)\n        const k = i in this.state.topK ? this.state.topK[i] : this.state.topK.all\n        const saliencyMap = (\n          <div key={i}>\n            {header}\n            {colorMap}\n            <Tooltip multiline id={TOOLTIP_ID} /> <input type=\"range\" min={0} max={colorMap.length} step=\"1\" value={k} className=\"slider\" onChange={this.handleInputTopKChange(i)} style={{ padding: \"0px\", margin: \"10px 0px\" }} />\n            <br/>\n            <span style={{ color: \"#72BCFF\" }}>Visualizing the top {k} most important words.</span>\n            <br />\n            <br />\n          </div>\n        )\n        saliencyMaps.push(saliencyMap);\n      }\n      displayText = <div>{saliencyMaps}</div>\n    }\n\n    return (\n      <>\n        <div className=\"content\">\n            {description}\n        </div>\n        {displayText}\n      </>\n    )\n  }\n}\n\nexport const WhatIsThis = styled.span`\n    ${Link.linkColorStyles()}\n    padding-left: ${({theme}) => theme.spacing.md};\n    font-style: italic;\n`\n\nexport default SaliencyMaps\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Collapse } from '@allenai/varnish';\n\nimport { FormInput } from './Form';\nimport { RedToken, GreenToken, TransparentToken } from './Shared';\n\n// takes in the input before and after the hotflip attack and highlights\n// the words that were replaced in red and the new words in green\nconst colorizeTokensForHotflipUI = (originalInput, flippedInput) => {\n    let originalStringColorized = []\n    let flippedStringColorized = []\n    for (let idx = 0; idx < originalInput.length; idx++) {\n        // if not equal, then add red and green tokens to show a flip\n        if (originalInput[idx] !== flippedInput[idx]){\n            originalStringColorized.push(\n                <RedToken key={idx}>\n                    {originalInput[idx]}\n                </RedToken>\n            )\n            flippedStringColorized.push(\n                <GreenToken key={idx}>\n                    {flippedInput[idx]}\n                </GreenToken>\n            )\n        } else {\n        // use transparent background for tokens that are not flipped\n            originalStringColorized.push(\n                <TransparentToken key={idx}>\n                    {originalInput[idx]}\n                </TransparentToken>\n            )\n            flippedStringColorized.push(\n                <TransparentToken key={idx}>\n                    {flippedInput[idx]}\n                </TransparentToken>\n            )\n        }\n    }\n    return [originalStringColorized, flippedStringColorized]\n}\n\n\nexport default class HotflipComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedCluster: -1,\n      activeIds: [],\n      activeDepths: {ids:[],depths:[]},\n      selectedId: null,\n      isClicking: false,\n      loading: false,\n    };\n\n    this.callAttackFunction = this.callAttackFunction.bind(this);\n    this.updateTargetWord = this.updateTargetWord.bind(this);\n    this.handleHighlightMouseDown = this.handleHighlightMouseDown.bind(this);\n    this.handleHighlightMouseOver = this.handleHighlightMouseOver.bind(this);\n    this.handleHighlightMouseOut = this.handleHighlightMouseOut.bind(this);\n    this.handleHighlightMouseUp = this.handleHighlightMouseUp.bind(this);\n  }\n\n  callAttackFunction = attackFunction => () => {\n    this.setState({ ...this.state, loading: true})\n    attackFunction(this.state).then(() => this.setState({ loading: false }));\n  }\n\n  handleHighlightMouseDown(id, depth) {\n    let depthTable = this.state.activeDepths;\n    depthTable.ids.push(id);\n    depthTable.depths.push(depth);\n\n    this.setState({\n      selectedId: null,\n      activeIds: [id],\n      activeDepths: depthTable,\n      isClicking: true\n    });\n  }\n\n  handleHighlightMouseUp(id, prevState) {\n    const depthTable = this.state.activeDepths;\n    const deepestIndex = depthTable.depths.indexOf(Math.max(...depthTable.depths));\n\n    this.setState(prevState => ({\n      selectedId: depthTable.ids[deepestIndex],\n      isClicking: false,\n      activeDepths: {ids:[],depths:[]},\n      activeIds: [...prevState.activeIds, id],\n    }));\n  }\n\n  handleHighlightMouseOver(id, prevState) {\n    this.setState(prevState => ({\n      activeIds: [...prevState.activeIds, id],\n    }));\n  }\n\n  handleHighlightMouseOut(id, prevState) {\n    this.setState(prevState => ({\n      activeIds: prevState.activeIds.filter(i => (i === this.state.selectedId)),\n    }));\n  }\n\n  updateTargetWord(e) {\n    const value = e.target.value === '' ? undefined : e.target.value\n    this.setState({target: value});\n  }\n\n  render() {\n    const { hotflipData, hotflipFunction, targeted } = this.props\n    let originalString = ''\n    let flippedString = ''\n    let newPrediction = ''\n    let context = \" \";\n    // enters during initialization\n    if (hotflipData === undefined) {\n        flippedString = \" \";\n    }\n    // data is available, display the results of Hotflip\n    else {\n        [originalString, flippedString] = colorizeTokensForHotflipUI(hotflipData[\"original\"],\n                                                                     hotflipData[\"final\"][0])\n        newPrediction = hotflipData[\"new_prediction\"]\n        context = hotflipData[\"context\"]\n    }\n    const runButton = <button\n                        type=\"button\"\n                        className=\"btn\"\n                        style={{margin: \"30px 0px\"}}\n                        onClick={this.callAttackFunction(hotflipFunction)}\n                       >\n                         Flip Words\n                      </button>\n\n    const target = targeted === undefined ?\n      null\n    :\n      <p> Leave blank to allow any change (untargeted). For targeted attacks, enter a single token that you want to flip the mask to: <FormInput type=\"text\" onChange={ this.updateTargetWord }/> </p>\n\n    const buttonDisplay = (flippedString !== \" \" && targeted === undefined) ?\n      null\n    :\n      <div>\n        <p style={{color: \"#7c7c7c\"}}>Press \"flip words\" to run HotFlip.</p>\n        {target}\n        {runButton}\n      </div>\n\n    const controlDisplay = (this.state.loading && flippedString === \" \") ?\n      <div><p style={{color: \"#7c7c7c\"}}>Loading attack...</p></div>\n    :\n      buttonDisplay\n\n    const resultDisplay = (flippedString === \" \") ?\n      \"\"\n    :\n      <div>\n        {context !== \" \" ? context : \"\"}\n        <p><strong>Original Input:</strong> {originalString}</p>\n        <p><strong>Flipped Input:</strong> {flippedString}</p>\n        <p><b>Prediction changed to:</b> {newPrediction}</p>\n      </div>\n\n    return (\n      <>\n        <p>\n          <a href=\"https://arxiv.org/abs/1712.06751\" target=\"_blank\" rel=\"noopener noreferrer\">HotFlip</a> flips words in the input to change the model's prediction. We iteratively flip the input word with the highest gradient until the prediction changes.\n        </p>\n        {resultDisplay}\n        {controlDisplay}\n      </>\n    )\n  }\n}\n\nexport const HotflipPanel = styled(Collapse.Panel).attrs({\n  header: \"HotFlip Attack\"\n})``;\n","import React from 'react'\nimport { withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport { Collapse } from '@allenai/varnish';\n\nimport OutputField from '../OutputField'\nimport SaliencyMaps from '../Saliency'\nimport HotflipComponent, { HotflipPanel } from '../Hotflip'\nimport { FormField, FormLabel, FormTextArea } from '../Form';\n\n// const apiUrl = () => `http://149.28.205.231:5002/api/code_prediction/predict`\n\nconst NAME_OF_INPUT_TO_ATTACK = \"tokens\"\nconst NAME_OF_GRAD_INPUT = \"grad_input_1\"\nconst title = \"Language Modeling\";\n\nconst Wrapper = styled.div`\n  color: #232323;\n  flex-grow: 1;\n  font-size: 1em;\n  background: ${({theme}) => theme.palette.background.light};\n  overflow: scroll;\n\n  @media(max-width: 500px) {\n    margin: 0;\n  }\n`\n\nconst ModelArea = styled.div`\n  background: ${({theme}) => theme.palette.common.white};\n`\n\nconst Loading = styled.div`\n  position: absolute;\n  bottom: 1rem;\n  right: 1rem;\n  display: flex;\n  align-items: center;\n  font-size: 0.8em;\n  color: #8c9296;\n`\n\nconst Error = styled(Loading)`\n  color: red;\n`\n\nconst LoadingText = styled.div`\n  padding-left: ${({theme}) => theme.spacing.xs};\n`\n\nconst InputOutput = styled.div`\n  display: flex;\n  margin-top: ${({theme}) => theme.spacing.sm};\n\n  @media(max-width: 500px) {\n    display: block;\n  }\n`\n\nconst InputOutputColumn = styled(FormField)`\n  flex: 1 1 50%;\n\n  :first-child {\n    padding-right: ${({theme}) => theme.spacing.md};\n  }\n\n  :last-child {\n    padding-left: ${({theme}) => theme.spacing.md};\n  }\n\n  @media(max-width: 500px) {\n    :first-child,\n    :last-child {\n      padding: 0;\n    }\n\n    :first-child {\n      padding: ${({theme}) => `0 0 ${theme.spacing.md}`};\n    }\n  }\n`\n\nconst TextInput = styled(FormTextArea)`\n  display: block;\n  width: 100%;\n  font-size: 1.25em;\n  min-height: 100px;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  padding: ${({theme}) => theme.spacing.md};\n`\n\nconst ListItem = styled.li`\n  margin: ${({theme}) => `0 0 ${theme.spacing.xs}`};\n`\n\nconst ChoiceList = styled.ul`\n  padding: 0;\n  margin: 0;\n  flex-wrap: wrap;\n  list-style-type: none;\n`\n\nconst ChoiceItem = styled.button`\n  color: #2085bc;\n  cursor: pointer;\n  background: transparent;\n  display: inline-flex;\n  align-items: center;\n  line-height: 1;\n  font-size: 1.15em;\n  border: none;\n  border-bottom: ${({theme}) => `2px solid ${theme.palette.common.transparent}`};\n`\n\nconst UndoButton = styled(ChoiceItem)`\n  color: #8c9296;\n  margin-bottom: ${({theme}) => theme.spacing.xl};\n`\n\nconst Probability = styled.span`\n  color: #8c9296;\n  margin-right: ${({theme}) => theme.spacing.xs};\n  font-size: 0.8em;\n  min-width: 4em;\n  text-align: right;\n`\n\nconst Token = styled.span`\n  font-weight: 600;\n`\n\nconst DEFAULT = \"AllenNLP is\";\n\nfunction addToUrl(output, choice) {\n  if ('history' in window) {\n    window.history.pushState(null, null, '?text=' + encodeURIComponent(output + (choice || '')))\n  }\n}\n\nfunction loadFromUrl() {\n  const params =\n      document.location.search.substr(1).split('&').map(p => p.split('='));\n  const text = params.find(p => p[0] === 'text');\n  return Array.isArray(text) && text.length === 2 ?  decodeURIComponent(text.pop()) : null;\n}\n\nfunction trimRight(str) {\n  return str.replace(/ +$/, '');\n}\n\nconst DEFAULT_MODEL = \"345M\"\n\nconst description = (\n  <span>\n    <p>Hello</p>\n  </span>\n)\n\nconst probabilitiesNote = (\n  <span>\n    Note: The prediction percentages are normalized across these five sequences. The true probabilities are lower.\n  </span>\n)\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.currentRequestId = 0;\n\n    this.state = {\n      output: loadFromUrl() || DEFAULT,\n      top_tokens: null,\n      logits: null,\n      probabilities: null,\n      loading: false,\n      error: false,\n      model: DEFAULT_MODEL,\n      interpretData: null,\n      attackData: null\n    }\n\n    this.choose = this.choose.bind(this)\n    this.debouncedChoose = _.debounce(this.choose, 1000)\n    this.setOutput = this.setOutput.bind(this)\n    // this.runOnEnter = this.runOnEnter.bind(this)\n    // this.interpretModel = this.interpretModel.bind(this)\n    // this.attackModel = this.attackModel.bind(this)\n  }\n\n  setOutput(evt) {\n    const value = evt.target.value\n    if (value) { // TODO(michaels): I shouldn't need to do this\n      const trimmed = trimRight(value);\n\n      const loading = trimmed.length > 0;\n\n      this.setState({\n          output: value,\n          top_tokens: null,\n          logits: null,\n          probabilities: null,\n          interpretData: null,\n          attackData: null,\n          loading: loading\n      })\n\n      this.debouncedChoose()\n    }\n    else { // Update text input without request to backend server\n      this.setState({\n          output: value,\n          top_tokens: null,\n          logits: null,\n          probabilities: null,\n          interpretData: null,\n          attackData: null,\n          loading: false\n      })\n    }\n  }\n\n  createRequestId() {\n    const nextReqId = this.currentRequestId + 1;\n    this.currentRequestId = nextReqId;\n    return nextReqId;\n  }\n\n  componentDidMount() {\n    this.choose()\n    if ('history' in window) {\n      window.addEventListener('popstate', () => {\n        const fullText = loadFromUrl();\n        const doNotChangeUrl = fullText ? true : false;\n        const output = fullText || DEFAULT;\n        this.setState({\n          output,\n          loading: true,\n          top_tokens: null,\n          logits: null,\n          probabilities: null,\n          model: this.state.model\n        }, () => this.choose(undefined, doNotChangeUrl));\n      })\n    }\n  }\n\n  choose(choice = undefined, doNotChangeUrl) {\n    // strip trailing spaces\n    const textAreaText = this.state.output;\n    if (trimRight(textAreaText).length === 0) {\n      this.setState({ loading: false });\n      return;\n    }\n\n    this.setState({ loading: true, error: false })\n    // TODO(mattg): this doesn't actually send the newline token to the model in the right way.\n    // I'm not sure how to fix that.\n    const cleanedChoice = choice === undefined ? undefined : choice.replace(/↵/g, '\\n');\n\n    const sentence = choice === undefined ? textAreaText : textAreaText + cleanedChoice\n    const payload = {\n      sentence: sentence\n    }\n\n    const currentReqId = this.createRequestId();\n\n    if ('history' in window && !doNotChangeUrl) {\n      addToUrl(this.state.output, cleanedChoice);\n    }\n    // /api/code_prediction/predict\n    // useEffect(() => {\n    //   fetch('/api/time').then(res => res.json()).then(data => {\n    //     setCurrentTime(data.time);\n    //   });\n    // }, []);\n\n    // fetch(\"/api/time\", {\n    //   method: \"POST\",\n    //   // mode: \"no-cors\",\n    //   // headers: {\n    //   //     \"Accept\": \"application/json\",\n    //   //     \"Content-Type\": \"application/json\",\n    //   //     \"Access-Control-Allow-Origin\": \"*\",\n    //   //     \"Access-Control-Expose-Headers\": \"Access-Control-*\",\n    //   //     \"Access-Control-Allow-Headers\": \"Access-Control-*, Origin, X-Requested-With, Content-Type, Accept\",\n    //   //     'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, HEAD',\n    //   //     'Allow': 'GET, POST, PUT, DELETE, OPTIONS, HEAD',\n    //   // },\n    //   // body: JSON.stringify(payload),\n    // })\n    fetch(\"/api/time\")\n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n      // if (this.currentRequestId === currentReqId) {\n      //   // If the user entered text by typing don't overwrite it, as that feels\n      //   // weird. If they clicked it overwrite it\n      //   const output = choice === undefined ? this.state.output : data.output\n      //   this.setState({...data, output: sentence, loading: false})\n      //   this.requestData = output;\n      // }\n    })\n    .catch(err => {\n      console.error('Error trying to communicate with the API:', err);\n      this.setState({ error: true, loading: false });\n    });\n  }\n\n  // Temporarily (?) disabled\n  // runOnEnter(e) {\n  //   if (e.key === 'Enter') {\n  //       e.preventDefault()\n  //       e.stopPropagation()\n  //       this.choose()\n  //   }\n  // }\n\n  render() {\n\n    let requestData = {\"sentence\": this.state.output};\n    // let interpretData = this.state.interpretData;\n    // let attackData = this.state.attackData;\n    let tokens = [];\n    if (this.state.tokens === undefined) {\n        tokens = [];\n    }\n    else {\n        if (Array.isArray(this.state.tokens[0])) {\n            tokens = this.state.tokens[0];\n        }\n        else {\n            tokens = this.state.tokens;\n        }\n    }\n    return (\n      <Wrapper classname=\"model\">\n        <ModelArea className=\"model__content answer\">\n          <h2><span>{title}</span></h2>\n          <span>{description}</span>\n          <InputOutput>\n            <InputOutputColumn>\n              <FormLabel>Sentence:</FormLabel>\n                <TextInput type=\"text\"\n                          autoSize={{ minRows: 5, maxRows: 10 }}\n                          value={this.state.output}\n                          onChange={this.setOutput}/>\n                {this.state.loading ? (\n                  <Loading>\n                    <img src=\"/assets/loading-bars.svg\" width=\"25\" height=\"25\" alt=\"loading\" />\n                    <LoadingText>Loading</LoadingText>\n                  </Loading>\n                ) : null}\n                {this.state.error ? (\n                  <Error>\n                    <span role=\"img\" aria-label=\"warning\">️⚠</span> Something went wrong. Please try again.\n                  </Error>\n                ) : null}\n            </InputOutputColumn>\n            <InputOutputColumn>\n              <FormLabel>Predictions:</FormLabel>\n              <Choices output={this.state.output}\n                      index={0}\n                      choose={this.choose}\n                      logits={this.state.logits}\n                      top_tokens={this.state.top_tokens}\n                      probabilities={this.state.probabilities}\n                      hidden={this.state.loading}/>\n            </InputOutputColumn>\n          </InputOutput>\n          <span>{probabilitiesNote}</span>\n        </ModelArea>\n      </Wrapper>\n    )\n  }\n}\n\n\nconst formatProbability = (probs, idx) => {\n  // normalize the displayed probabilities\n  var sum = probs.reduce(function(a, b){\n    return a + b;\n  }, 0);\n  var prob = probs[idx] / sum\n  prob = prob * 100\n  return `${prob.toFixed(1)}%`\n}\n\nconst Choices = ({output, index, logits, top_tokens, choose, probabilities}) => {\n  if (!top_tokens) { return null }\n  if (top_tokens.length <= index) { return null }\n  if (probabilities.length <= index) { return null }\n\n  const lis = top_tokens.map((word, idx) => {\n    const prob = formatProbability(probabilities, idx)\n\n    // get rid of CRs\n    const cleanWord = word.join('').replace(' ,', ',').replace(/\\n/g, \"↵\")\n        .replace(/Ġ/g, \" \").replace(/Ċ/g, \"↵\")\n\n    const displaySeq = cleanWord.slice(-1) == \".\" ? cleanWord : cleanWord.concat(' ...')\n\n    return (\n      <ListItem key={`${idx}-${cleanWord}`}>\n        <ChoiceItem onClick={() => choose(cleanWord)}>\n          <Probability>{prob}</Probability>\n          {' '}\n          <Token>{displaySeq}</Token>\n        </ChoiceItem>\n      </ListItem>\n    )\n  })\n\n  const goBack = () => {\n    window.history.back();\n  }\n\n  const goBackItem = (\n    <ListItem key=\"go-back\">\n      {'history' in window ? (\n        <UndoButton onClick={goBack}>\n          <Probability>←</Probability>\n          {' '}\n          <Token>Undo</Token>\n        </UndoButton>\n      ) : null}\n    </ListItem>\n  )\n\n  return (\n    <ChoiceList>\n      {lis}\n      {goBackItem}\n    </ChoiceList>\n  )\n}\n\nconst modelProps = {}\n\nexport default withRouter(props => <App {...props} {...modelProps}/>)\n","import annotateIcon from './icons/annotate-14px.svg';\nimport otherIcon from './icons/other-14px.svg';\nimport parseIcon from './icons/parse-14px.svg';\nimport passageIcon from './icons/passage-14px.svg';\nimport questionIcon from './icons/question-14px.svg';\nimport addIcon from './icons/add-14px.svg';\n\n// code summarization task\nimport CodeSummarization from './components/demos/CodeSummarization'\n// import CodeRetrieval from './components/demos/CodeRetrieval'\n// import TypeInference from './components/demos/TypeInference'\nimport CodePrediction from './components/demos/CodePrediction'\n\n// This is the order in which they will appear in the menu\nconst modelGroups = [\n    // NCC examples\n    {\n        label: \"Code Summarization\",\n        iconSrc: annotateIcon,\n        defaultOpen: true,\n        models: [\n            {model: \"code-summarization\", name: \"Code Summarization\", component: CodeSummarization},\n        ]\n    },\n    // {\n    //     label: \"Code Retrieval\",\n    //     iconSrc: questionIcon,\n    //     defaultOpen: true,\n    //     models: [\n    //         {model: \"code-retrieval\", name: \"Code Retrieval\", component: CodeRetrieval},\n    //     ]\n    // },\n    // {\n    //     label: \"Type Inference\",\n    //     iconSrc: parseIcon,\n    //     defaultOpen: true,\n    //     models: [\n    //         {model: \"type-inference\", name: \"Type Inference\", component: TypeInference},\n    //     ]\n    // },\n    {\n        label: \"Code Prediction\",\n        iconSrc: addIcon,\n        defaultOpen: true,\n        models: [\n            {model: \"code-prediction\", name: \"Code Prediction\", component: CodePrediction},\n        ]\n    },\n]\n\n// Create mapping from model to component\nlet modelComponents = {}\nmodelGroups.forEach((mg) => mg.models.forEach(({model, component}) => modelComponents[model] = component));\n\nlet modelRedirects = {}\nmodelGroups.forEach((mg) => mg.models.forEach(\n    ({model, redirects}) => {\n        if (redirects) {\n            redirects.forEach((redirect) => modelRedirects[redirect] = model)\n        }\n    }\n));\n\nexport {modelComponents, modelGroups, modelRedirects}\n","import React from 'react';\nimport { Typography, Menu as VarnishMenu, Layout, Icon } from '@allenai/varnish';\n\nimport { InternalLink } from '../components/InternalLink'\nimport { modelGroups } from '../models'\n\nconst { BodySmall } = Typography;\nconst { IconMenuItemColumns, Item, SubMenu } = VarnishMenu;\nconst { LeftSider } = Layout;\nconst { ImgIcon } = Icon;\n\n/*******************************************************************************\n  <Menu /> Component\n*******************************************************************************/\n\nexport default class Menu extends React.Component {\n  siderWidthExpanded = '300px';\n  siderWidthCollapsed = '80px';\n  constructor(props) {\n      super(props);\n\n      this.state = {\n          menuCollapsed: false\n      };\n  }\n\n  handleMenuCollapse = () => {\n      this.setState({ menuCollapsed: !this.state.menuCollapsed });\n  };\n\n  render() {\n    return (\n      <LeftSider\n        width={this.siderWidthExpanded}\n        collapsedWidth={this.siderWidthCollapsed}\n        collapsible\n        collapsed={this.state.menuCollapsed}\n        onCollapse={this.handleMenuCollapse}\n        >\n          <VarnishMenu\n            defaultSelectedKeys={[this.props.redirectedModel]}\n            defaultOpenKeys={modelGroups.filter(g => g.defaultOpen).map(g => g.label)}\n            mode=\"inline\"\n          >\n            {modelGroups.map(g => (\n              <SubMenu\n                key={g.label}\n                title={\n                  <IconMenuItemColumns>\n                    {g.iconSrc && (\n                      <ImgIcon src={g.iconSrc} />\n                    )}\n                    <BodySmall>{g.label}</BodySmall>\n                  </IconMenuItemColumns>\n                }\n              >\n                {g.models.map(m => (\n                  <Item key={m.model}>\n                    <InternalLink to={\"/\" + m.model} onClick={() => {}}>\n                      <span>{m.name}</span>\n                    </InternalLink>\n                  </Item>\n                ))}\n              </SubMenu>\n            ))}\n          </VarnishMenu>\n      </LeftSider>\n    )\n  }\n}\n","import { useEffect } from 'react';\nimport { withRouter } from 'react-router';\n\n/**\n * Use this component inside a top-level <Route /> handler when you'd like\n * the page to be scrolled to the top after a URL change.\n */\nconst ScrollToTopOnPageChangeImpl = ({ history }) => {\n    useEffect(() =>\n        history.listen(() => {\n            window.scrollTo(0, 0);\n        })\n    );\n    return null;\n};\n\nexport const ScrollToTopOnPageChange = withRouter(ScrollToTopOnPageChangeImpl);\n","import React from 'react';\nimport { Spin } from '@allenai/varnish';\nimport styled from 'styled-components';\n\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\n\nclass WaitingForPermalink extends React.Component {\n    render() {\n        return (\n            <LoadingContainer>\n                <Spin indicator={<LoadingOutlined style={{ fontSize: '2rem' }} />} />\n            </LoadingContainer>\n        );\n    }\n}\n\nconst LoadingContainer = styled.div`\n    ${({ theme }) => `\n        padding: ${theme.spacing.xl};\n        font-size: ${theme.typography.bodyJumbo.fontSize};\n    `}\n`;\n\nexport default WaitingForPermalink;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {BrowserRouter as Router, Route, Redirect, Switch} from 'react-router-dom';\nimport {ThemeProvider, Footer, Header, Layout} from '@allenai/varnish';\nimport Menu from './components/Menu';\nimport ModelIntro from './components/ModelIntro';\nimport {ScrollToTopOnPageChange} from './components/ScrollToTopOnPageChange';\nimport {modelComponents, modelRedirects} from './models'\nimport {PaneTop} from './components/Pane';\nimport WaitingForPermalink from './components/WaitingForPermalink';\n// import Info from './components/Info';\n\nimport './css/App.css';\nimport '@allenai/varnish/dist/varnish.css';\n\nconst {Content, DefaultAppLayoutProvider} = Layout;\nconst {HeaderColumns} = Header;\n\nconst DEFAULT_PATH = \"/code-prediction\"\n\nconst App = () => (\n    <ThemeProvider>\n        <Router>\n            <DefaultAppLayoutProvider layoutVariant=\"app\">\n                <ScrollToTopOnPageChange/>\n                <Switch>\n                    <Route exact path=\"/\" render={() => (\n                        <Redirect to={DEFAULT_PATH}/>\n                    )}/>\n                    <Route path=\"/:model/:slug?\" component={Demo}/>\n                </Switch>\n            </DefaultAppLayoutProvider>\n        </Router>\n    </ThemeProvider>\n)\n\nconst Demo = (props) => {\n    const {model, slug} = props.match.params\n    const redirectedModel = modelRedirects[model] || model\n    return (\n        <Layout bgcolor=\"white\">\n            <Layout>\n                <Menu redirectedModel={redirectedModel}/>\n                <Layout>\n                    <FullSizeContent>\n                        <SingleTaskDemo model={redirectedModel} slug={slug}/>\n                    </FullSizeContent>\n                    <Footer/>\n                </Layout>\n            </Layout>\n        </Layout>\n    );\n}\n\nconst FullSizeContent = styled(Content)`\n    padding: 0;\n`;\n\n// const HeaderColumnsWithSpace = styled(HeaderColumns)`\n//     padding: ${({theme}) => theme.spacing.md} 0;\n// `;\n\nclass SingleTaskDemo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // React router supplies us with a model name and (possibly) a slug.\n        const {model, slug} = props;\n\n        this.state = {\n            slug,\n            selectedModel: model,\n            requestData: null,\n            responseData: null\n        }\n    }\n\n    // We also need to update the state whenever we receive new props from React router.\n    componentDidUpdate() {\n        const {model, slug} = this.props;\n        if (model !== this.state.selectedModel || slug !== this.state.slug) {\n            const isModelChange = model !== this.state.selectedModel;\n            const responseData = (\n                isModelChange\n                    ? null\n                    : this.state.responseData\n            );\n            const requestData = (\n                isModelChange\n                    ? null\n                    : this.state.requestData\n            );\n            this.setState({selectedModel: model, slug, responseData, requestData});\n        }\n    }\n\n    // After the component mounts, we check if we need to fetch the data\n    // for a permalink.\n    componentDidMount() {\n        const {slug, responseData} = this.state;\n\n        // If this is a permalink and we don't yet have the data for it...\n        if (slug && !responseData) {\n            // Make an ajax call to get the permadata,\n            // and then use it to update the state.\n            fetch(`/api/permalink/${slug}`)\n                .then((response) => {\n                    return response.json();\n                }).then((json) => {\n                const {request_data} = json;\n                this.setState({requestData: request_data});\n            }).catch((error) => {\n                // If a permalink doesn't resolve, we don't want to fail. Instead remove the slug from\n                // the URL. This lets the user at least prepare a submission.\n                console.error('Error loading permalink:', error);\n                // Start over without the slug.\n                window.location.replace(window.location.pathname.replace(`/${slug}`, ''));\n            });\n        }\n    }\n\n    render() {\n        const {slug, selectedModel, requestData, responseData} = this.state;\n        console.log(slug, selectedModel, requestData, responseData);\n        const updateData = (requestData, responseData) => this.setState({requestData, responseData})\n\n        if (slug && !requestData) {\n            // We're still waiting for permalink data, so just return the placeholder component.\n            return (<WaitingForPermalink/>);\n        } else if (modelComponents[selectedModel]) {\n            // This is a model we know the component for, so render it.\n            return React.createElement(modelComponents[selectedModel], {\n                requestData,\n                responseData,\n                selectedModel,\n                updateData\n            })\n            // return (<WaitingForPermalink/>);\n        }\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}